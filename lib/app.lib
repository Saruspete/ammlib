# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammApp::MetaCheck {
	ammLib::Loadable archive input string
}

function ammApp::MetaInit {
	ammLib::Require archive input string
}

# -----------------------------------------------------------------------------
# Handle standalone application management (start, stop, update...)
# -----------------------------------------------------------------------------

# Synopsis
#  This library allows to manage easily application that behave like daemons, without
#  having requirements on the host system
#

# Features:
# - in-place application download, deploy, configure and upgrade
# - secure upgrade: leverage system snapshot features or copy data & dependencies
#   tests in namespace for app validation before switching. easy rollback
# - works on its calling name: symlink the same script multiple times to have
#   multiples instances.
# - Per-instance configuration:  "instance.d/config"


# Return codes
# 0:   true
# 1:   false
# 99:  not implemented


# @description  Initialize application vars
function ammApp::Init {

	if [[ -n "${APP_NAME:-}" ]]; then
		ammLog::Error "Already called $FUNCNAME. Called again at $(ammLog::Stackdump 2 1)"
		return 1
	fi

	# Set my path according to these
	typeset -gr APP_ROOT="$(realpath "${1:-$__AMMLIB_CALLPATH/..}")"
	typeset -gr APP_INST="${__AMMLIB_CALLFILE}"
	typeset -gr APP_SDIR="${__AMMLIB_CALLPATH}"
	typeset -gr APP_GRPN="${APP_INST%%-*}"
	typeset -gr APP_NAME="${APP_INST#*-}"
	typeset -g  APP_BASE="${APP_ROOT}/apps/${APP_GRPN}/${APP_NAME}"
	typeset -g  DAT_BASE="${APP_ROOT}/data/${APP_GRPN}/${APP_NAME}"
	typeset -g  SRC_BASE="${APP_ROOT}/srcs/${APP_GRPN}/${APP_NAME}"
	typeset -g  TMP_BASE="${APP_ROOT}/temp/${APP_GRPN}/${APP_NAME}"


	# Can be overridden
	typeset -g RUN_VERS="${RUN_VERS:-current}"
	typeset -g RUN_USER="${RUN_USER:-$(ammApp::GetOwner ${APP_SDIR}/${APP_INST})}"
	typeset -g RUN_BIN="${RUN_BIN:-}"
	typeset -g RUN_CFG="${RUN_CFG:-}"
	typeset -g RUN_OPTCOMMON="${RUN_OPTCOMMON:-}"
	typeset -g RUN_OPTSTART="${RUN_OPTSTART:-}"
	typeset -g RUN_OPTSTOP="${RUN_OPTSTOP:-}"
	typeset -g RUN_OPTPID="${RUN_OPTPID:-}"
	typeset -g RUN_DAEMON="${RUN_DAEMON:-}"
	typeset -g RUN_WORKDIR="${RUN_WORKDIR:-"$DAT_BASE/$RUN_VERS"}"

	# Check for cfg override
	if [[ -e "${APP_SDIR}/${APP_INST}.d/config" ]]; then
		# TODO: Check for path chmod and other security
		source "${APP_SDIR}/${APP_INST}.d/config"
	fi

	# Check for per-version override
	if [[ -e "${APP_SDIR}/${APP_INST}.d/config-${RUN_VERS}" ]]; then
		# TODO: Check for path chmod and other security
		source "${APP_SDIR}/${APP_INST}.d/config-${RUN_VERS}"
	fi


	# Check running user and reexec it here if needed
	if [[ -n "$RUN_USER" ]] && [[ "$RUN_USER" != "$__AMMLIB_USERNAME" ]]; then
		typeset -i r=99
		# try to reexec the current script with the target user
		ammLog::Info "Reexecing $__AMMLIB_CALLNAME as '$RUN_USER'"
		ammExec::AsUser "$RUN_USER" "$__AMMLIB_CALLNAME ${__AMMLIB_CALLOPTS_ORIG:+${__AMMLIB_CALLOPTS_ORIG[@]}}"
		r=$?
		if [[ $r != 0 ]]; then
			ammLog::Error "An error occured during re-exec as '$RUN_USER'"
		fi
		exit $r
	fi


	# No app data, first time init. Ask
	if ! [[ -d "$DAT_BASE" ]]; then
		if ! ammInput::GetYN "initallowed" "First time need init. Create folder structure in '$APP_ROOT' ?"; then
			ammLog::Error "Not validated. You can ... [TODO]"
			return 1
		fi
	fi

	# Create folders, they may be used by update procedures
	typeset p
	for p in "$APP_BASE" "$DAT_BASE" "$SRC_BASE" "$TMP_BASE"; do
		if ! [[ -d "$p" ]]; then
			if ! mkdir -p "$p"; then
				ammLog::Error "Unable to create required folder '$p'"
				return 1
			fi
		fi
	done

	# Clean the paths for absolute value, and set read-only
	typeset -gr APP_BASE="$(realpath $APP_BASE)"
	typeset -gr DAT_BASE="$(realpath $DAT_BASE)"
	typeset -gr SRC_BASE="$(realpath $SRC_BASE)"
	typeset -gr TMP_BASE="$(realpath $TMP_BASE)"

	# Sanity checks
	[[ -z "$APP_BASE" ]] && { echo >&2 "Unable to find APP_BASE value"; return 1; }
	[[ -z "$DAT_BASE" ]] && { echo >&2 "Unable to find DAT_BASE value"; return 1; }
	[[ -z "$TMP_BASE" ]] && { echo >&2 "Unable to find TMP_BASE value"; return 1; }
	[[ -e "$APP_BASE" ]] || { echo >&2 "Missing required folder '$APP_BASE'"; return 1; }

	# Export variables to be used by binaries and tools themselves
	export APP_BASE DAT_BASE SRC_BASE TMP_BASE

	# Change working directory (or not, to avoid going to $HOME)
	[[ -d "$RUN_WORKDIR" ]] && cd "${RUN_WORKDIR:-.}"

	return 0
}




##############################################################################
#
# Application path management
#
##############################################################################
function ammApp::GetOwner {
	typeset file="$1"
	stat -c '%U' "$file"
}

function ammApp::GetAppDir {
	typeset vers="${1:-current}"
	echo "$APP_BASE/$vers"
}

function ammApp::GetDataDir {
	typeset vers="${1:-current}"
	echo "$DAT_BASE/$vers"
}

function ammApp::GetTempDir {
	typeset vers="${1:-current}"
	echo "$TMP_BASE/$vers"
}

function ammApp::GetBinPath {
	typeset vers="${1:-current}"
	if [[ -n "$RUN_BIN" ]]; then
		# Absolute path
		if [[ "${RUN_BIN:0:1}" == "/" ]]; then
			echo $RUN_BIN
		else
			echo "$(ammApp::GetAppDir "$vers")/$RUN_BIN"
		fi
	fi
}

function ammApp::GetPidPath {
	typeset service="${1:-daemon}"
	typeset version="${2:-current}"

	typeset pidfile="$(ammApp::GetTempDir "$version")/pids/$service.pid"
	echo "$pidfile"

	typeset pidfolder="${pidfile%/*}"
	if ! [[ -d "$pidfolder" ]];  then
		if ! mkdir -p "$pidfolder" >/dev/null 2>&1; then
			ammLog::Warning "Unable to create pid folder '$pidfolder'"
			return 1
		fi
	fi
	return 0
}

function ammApp::GetLogPath {
	typeset service="${1:-daemon}"
	typeset version="${2:-current}"

	typeset logfile="$(ammApp::GetDataDir "$version")/logs/$service.log"
	echo "$logfile"

	typeset logfolder="${logfile%/*}"
	if ! [[ -d "$logfolder" ]];  then
		if ! mkdir "$logfolder" >/dev/null 2>&1; then
			ammLog::Warning "Unable to create log folder '$logfolder'"
			return 1
		fi
	fi
	return 0
}

function ammApp::GetCfgPath {
	typeset service="${1:-daemon}"
	typeset version="${2:-current}"

	typeset cfgfile="$(ammApp::GetDataDir "$version")/conf"
	echo "$cfgfile"

	typeset cfgfolder="${cfgfile%/*}"
	if ! [[ -d "$cfgfolder" ]];  then
		if ! mkdir "$cfgfolder" >/dev/null 2>&1; then
			ammLog::Warning "Unable to create cfg folder '$cfgfolder'"
			return 1
		fi
	fi
	return 0
}



function ammApp::VersionSetCurrent {
	typeset version="$1"

	typeset currdir="$(ammApp::GetAppDir "current")"
	typeset newdir="$(ammApp::GetAppDir "$version")"
	typeset currvers="$(ammApp::VersionGetCurrent)"
	typeset now="$(date +%y-%m-%d_%H-%M-%S)"

	# Check if target version exists
	if ! [[ -d "$newdir" ]]; then
		ammLog::Error "The specified new version '$version' does not exists as '$newdir'"
		return 1
	fi

	# Changing the application symlink
	[[ -L "$currdir" ]] && rm $currdir
	if [[ -e "$currdir" ]]; then
		typeset currdirbak="current.$now"

		ammLog::Warning "The 'current' folder '$currdir' is not a symlink. Moving it as '$currdirbak'"
		if ! mv "$currdir" "${currdir%/*}/${currdirbak}"; then
			ammLog::Error "An error occured during renaming of '$currdir' to '$currdirbak'"
			return 1
		fi
	fi

	# Create app symlink
	if ! ln -sf "$version" "$currdir"; then
		ammLog::Error "Error when creating new symlink '$currdir' for '$version'"
	fi

	# Save data according to the policy
	case "${UPG_DATAPOLICY:-}" in
		# Plain file copy
		copy)
			ammLog::Info "Copying current data to new version"
			typeset p
			for p in "$DAT_BASE" "$TMP_BASE"; do
				# TODO: Check for data size & free space

				# Symlink: Get realpath, create version, copy data, update symlink
				if [[ -L "$p/current" ]]; then
					cp -La "$p/current" "$p/$version"
					rm "$p/current"
					ln -sf "$version" "$p/current"

				# Plain dir, copy data elsewere
				else
					typeset dat="$p/current"
					typeset bak="$p/current.before-${version}.$now"
					if ! cp -a "$dat" "$bak"; then
						ammLog::Error "Error while copying data from '$dat' to '$bak'. Continuing"
					fi
				fi
			done
			;;

		# Using filesystem snapshot
		filesystem)
			ammLog::Warning "Filesystem snapshot not yet implemented..."
			;;

		none|'')
			ammLog::Info "Keeping data in place for new version '$version'"
			;;
	esac

	return 0
}

function ammApp::VersionGetCurrent {

	typeset realdir="$(realpath $(ammApp::GetAppDir))"
	realdir="${realdir%/}"
	echo "${realdir##*/}"
}

##############################################################################
#
# Main service processing
#
##############################################################################

# Standard start
function ammApp::Start {

	# Use global opts if available
	typeset opts=""
	typeset pidf=""
	typeset version="${RUN_VERS:-current}"
	typeset -i r

	# Add common options
	if [[ -n "$RUN_OPTCOMMON" ]]; then
		opts+="$RUN_OPTCOMMON "
	fi


	#
	# User defined startup func, just use it
	#
	if ammEnv::IsFunc "appRun::Start"; then
		ammLog::Info "Starting with custom appRun::Start"
		appRun::Start "$opts"
		r=$?
		ammLog::Info "Result: $r"
		return $r

	#
	# Variables defined for standard management
	#
	elif [[ -n "$RUN_BIN" ]]; then

		# Runas specified user. If reset by user script, assume current user is wanted
		typeset runas="${RUN_USER:-$__AMMLIB_USERNAME}"
		typeset runapp="$(ammApp::GetBinPath "$version")"
		if ! [[ -x "$runapp" ]]; then
			ammLog::Error "Executable '$runapp' does not exists"
			return 1
		fi

		# Common opts goes before action
		if [[ -n "${RUN_OPTCOMMON:-}" ]]; then
			opts+="$RUN_OPTCOMMON "
		fi

		# Start action
		if [[ -n "${RUN_OPTSTART:-}" ]]; then
			opts+="$RUN_OPTSTART "
		fi

		#
		# PIDFILE management
		#
		if [[ -n "$RUN_OPTPID" ]]; then
			pidf="$(ammApp::GetPidPath "$version")"
			opts+="${RUN_OPTPID}${pidf} "
		fi

		# If pidfile, check it has access to the file
		if [[ -n "$pidf" ]] && [[ -e "$pidf" ]]; then

			# Does the file already belong to target user
			if [[ "$(ammApp::GetOwner "$pidf")" != "$runas" ]]; then
				\chown $runas: "$pidf" || {
					ammLog::Error "Unable to chown '$runas' '$pidf'. The app may fail or be unmanageable"
				}
			fi
		fi

		#
		# Logfile and daemon management
		#
		if ammString::IsTrue "$RUN_DAEMON"; then
			typeset logfile="$(ammApp::GetLogPath "$version")"
			ammLog::Debug "Daemonizing and sending logs to '$logfile'"
			opts+=" >>$logfile 2>&1 0>/dev/null & "
		fi

		# Append optionnal arguments
		if [[ -n "${1:-}" ]]; then
			opts+="$@"
		fi

		# Closing unwanted FDs
		typeset fdToClose="" fd=
		for fd in /proc/$$/fd/*; do
			fd="${fd##*/}"
			if [[ $fd -gt 2 ]]; then
				fdToClose+="$fd>&- "
			fi
		done

		# Run the process
		typeset -i ret
		typeset out="" finalCmd="$runapp $opts 2>&1 $fdToClose"
		ammLog::Info "Starting '$finalCmd' with \$RUN_BIN var ($runapp $opts) as '$runas'"
		out="$(eval "$finalCmd")"
		ret=$?


		# Check return value
		if [[ $ret -ne 0 ]]; then
			ammLog::Error "Service start return: $ret. Output:\n$out"
			ammLog::Debug "$(ammLog::Stackdump)"
		else
			ammLog::Info "Result: $ret"
		fi
		return $ret

	# Nothing...
	else
		ammLog::Error "Cannot use generic start: No function 'appRun::Start' and no var 'RUN_BIN' defined"
		return 1
	fi

}


function ammApp::Stop {

	typeset pid="" out=""
	typeset r=99

	if ammEnv::IsFunc "appRun::Stop"; then
		ammLog::Info "Stopping with custom appRun::Stop"
		appRun::Stop "$@"
		r=$?
	else
		if pid="$(ammApp::IsRunning true)"; then

			# Custom stop command: call it
			if [[ -n "$RUN_OPTSTOP" ]]; then
				out="$(eval "$(ammApp::GetBinPath) $RUN_OPTSTOP $RUN_OPTCOMMON 2>&1 99>&- 98>&-")"
				r=$?
			# Standard stop: kill it with fire
			else
				if ! kill "$pid"; then
					ammLog::Error "Unable to kill pid $pid"
				fi
				# TODO: Handle cgroup or wait to send -9
				
				r=0
			fi
		fi

		# Clean the pidfile and lock if needed
		if ! ammApp::IsRunning && [[ -n "$RUN_OPTPID" ]]; then
			typeset pidfile="$(ammApp::GetPidPath)"
			[[ -e "$pidfile" ]] && rm -f "$pidfile"
		fi

	fi
	return $r
}

function ammApp::Status {

	typeset -i r=0

	if ammEnv::IsFunc "appRun::Status"; then
		appRun::Status "$@"
		r=$?
	else
		ammApp::IsRunning "$@"
		r=$?

		case $r in
			0)   echo "Running"; r=0  ;;
			1)   echo "Stopped"; r=0  ;;
			2)   echo "Dead";    r=1  ;;
			99)  echo "Unimplemented" ;;
			*)   echo "Unhandled return code '$r'"; r=99 ;;
		esac
	fi

	return $r
}

function ammApp::Zap {
	typeset pidfile="$(ammApp::GetPidPath)"
	if [[ -n "$pidfile" ]]; then
		if [[ -w "$pidfile" ]] || [[ -w "${pidfile%/*}" ]]; then
			echo "Removing pidfile '$pidfile'"
			rm -f "$pidfile"
			return $?
		else
			ammLog::Error "Cannot remove '$pidfile' (permission error)"
			return 1
		fi
	fi
	return 0
}

function ammApp::IsRunning {
	typeset showPid=${1:-false}
	typeset -i r=99

	# Custom status handled by script
	if ammEnv::IsFunc "appRun::IsRunning"; then
		appRun::IsRunning "$@"
		r=$?

	# Standard status handling
	else
		# If we have an option set, maybe we have a pidfile
		if [[ -n "$RUN_OPTPID" ]]; then
			typeset pidfile="$(ammApp::GetPidPath)"
			if [[ -e "$pidfile" ]] && [[ -r "$pidfile" ]]; then
				typeset pidstr="$(<$pidfile)"

				# TODO: Test for format ?
				if [[ -n "$pidstr" ]]; then

					typeset proc="/proc/$pidstr"
					if [[ -e "$proc" ]]; then

						typeset pid="${proc#/proc/}"

						# Double check with binary
						if [[ -n "$RUN_BIN" ]]; then

							# Check if the process is the one we expect
							typeset bin=""
							# Direct symlink reading
							if [[ -r "$proc/exe" ]]; then
								bin="$(realpath "$proc/exe" 2>/dev/null)"
							fi

							# fallback to cmdline parsing
							if [[ -z "$bin" ]]; then
								bin="$(cat "$proc/cmdline"|tr '\0' ' ')"
								bin="${bin%% *}"
							fi

							# Check if binary match
							typeset binwant="$(ammApp::GetBinPath)"
							if [[ "$bin" -ef "$binwant" ]]; then
								ammLog::Debug "Pid '$pid' found (matching binary) and running"
								ammString::IsTrue "$showPid" && echo $pid
								r=0
							else
								ammLog::Warning "Pid '$pid' found, but its binary '$bin' does not match expected '$binwant'"
								r=2
							fi

						# No binary to compare with. Assuming ok
						else
							ammLog::Debug "Pid ($pid) found and running"
							ammString::IsTrue "$showPid" && echo $pid
							r=0
						fi

					else
						ammLog::Debug "Process '$pidstr' not running. Stale pidfile?"
						ammLog::Warning "Pidfile present ($pidfile) but process ($pidstr) dead"
						r=2
					fi
				else
					ammLog::Debug "Process '$pidstr' present but empty"
					r=1
				fi
			# No pidfile, process dead or untracked
			else
				ammLog::Debug "No pidfile '$pidfile' available. Consider process stopped"
				r=1
			fi

		# No pidfile available, try from name
		else
			# Seek for a binary with same path & user
			if [[ -n "$RUN_BIN" ]]; then
				# Get the target binary file
				typeset binpath="$(ammApp::GetBinPath)"
				if [[ -e "$binpath" ]]; then
					# Seek for a matching symlink in /proc
					typeset exetest
					for exetest in /proc/[0-9]*/exe; do
						if [[ "$binpath" -ef "$exetest" ]] && [[ "$(ammApp::GetOwner "")" == "$RUN_USER" ]]; then
							typeset pid="${exetest#/proc/}"
							pid="${pid%/exe}"

							ammLog::Debug "Found matching bin ($binpath) & user ($RUN_USER) as pid $pid"
							ammString::IsTrue "$showPid" && echo $pid
							r=0
						fi
					done
				fi
			else
				ammLog::Error "No RUN_OPTPID nor RUN_BIN available. cannot check"
			fi
		fi
	fi

	return $r
}

# List available versions to be used for upgrade
function ammApp::VersionList {

	# Github project
	if [[ -n "${UPG_GHPROJECT:-}" ]]; then
		ammLib::Require "http"
		typeset tag ts name
		typeset fmt="%-20.20s  %-32.32s  %s\n"
		printf "$fmt" "Version" "Release date (days ago)" "friendly name"
		while read tag ts name; do
			typeset daysago="$(( ($(date +%s)-$ts) / (3600*24) ))"
			printf "$fmt" "$tag" "$(date -d "@$ts" "+%Y-%m-%d %H:%M:%S") ($daysago)" "$name"
		done < <(ammHttp::GithubReleaseList "$UPG_GHPROJECT")
		return $?
	# Custom function
	elif ammEnv::IsFunc "appUpgrade::VersionList"; then
		appUpgrade::VersionList
		return $?
	# No listing available
	else
		ammLog::Error "No helper function to list available version"
		return 1
	fi
}


# 
# Upgrade steps:
# 0) Get latest version string if none provided and check if update needed
# 1) Get URLs of files to download for given version
# 2) Download required content in tmpdir
# 3) Prepare content (extract, compile)
# 4) Deploy to target folder
# 5) Generate / Use new configuration
# 6) Test the binary in standalone environment
# 7) Stop current version
# 8) Call a snapshot on all services within the group
# 9) test the new version
# 10) Update current to new version
function ammApp::Upgrade {
	typeset versionNew="${1:-}"

	typeset versionOld="${RUN_VERS:-}"
	typeset currentLink="$APP_BASE/current"
	if [[ -z "$versionOld" ]] && [[ -L "$currentLink" ]]; then
		typeset oldpath="$(realpath "$currentLink")"
		oldpath="${oldpath%/}"
		oldpath="${oldpath##*/}"
		versionOld="$oldpath"
		if [[ -z "$versionOld" ]]; then
			ammLog::Error "Unable to guess the current version. Check '$currentLink' symlink format"
			return 1
		fi
	fi

	# 0) No new version specified. Try to get the latest
	if [[ -z "$versionNew" ]]; then
		if ammEnv::IsFunc "appUpgrade::GetLatest"; then
			ammLog::Debug "Calling 'appUpgrade::GetLatest' to get latest version"
			versionNew="$(appUpgrade::GetLatest)"

			if [[ -n "$versionNew" ]]; then
				ammLog::Info "Found latest version: '$versionNew'"
			else
				ammLog::Error "Unable to find automatically latest version"
				return 1
			fi

		# usual github project
		elif [[ -n "${UPG_GHPROJECT:-}" ]]; then
			ammLib::Require "http"

			# Allow usage of devel version
			if ammString::IsTrue "${UPG_GHDEVALLOWED:-false}"; then
				typeset branch="${UPG_GHDEVBRANCH:-master}"
				versionNew="$(ammHttp::GithubBranchGetLastCommit "$UPG_GHPROJECT" "$branch")"
				versionNew="${versionNew// /_}"
			# Only releases
			else
				versionNew="$(ammHttp::GithubReleaseGetLastVersion "$UPG_GHPROJECT")"
			fi

		# No helper, no var...
		else
			ammLog::Error "No version specified and no helper 'appUpgrade::GetLatest' defined"
			return 1
		fi
	fi


	# Nothing to update
	if [[ "$versionNew" == "$versionOld" ]]; then
		ammLog::Info "Latest version found: '$versionNew', same as current one. Exiting"
		return 0
	fi


	ammLog::Info "Upgrading from '$versionOld' to '$versionNew'"
	typeset r=0
	typeset url="" urls=
	typeset appdir="$APP_BASE/${versionNew}"
	typeset tmpdir="$TMP_BASE/${versionNew}"
	typeset tmpsource="$tmpdir/source"
	typeset tmpextract="$tmpdir/extract"

	#
	# Preparing upgrade
	#
	ammLog::StepBegin "Preparing upgrade"

	# 1) Get URLs of files to download for given version
	if ammEnv::IsFunc "appUpgrade::GetUrls"; then
		urls="$(appUpgrade::GetUrls "$versionNew")"
		ammLog::Debug "function appUpgrade::GetUrls returned: '$urls'"
	elif [[ -n "${UPG_GHPROJECT}" ]]; then
		# Try if supplied a release
		ammLog::Debug "Trying to get release assets from '$UPG_GHPROJECT' version '$versionNew'"
		typeset assets="$(ammHttp::GithubReleaseGetAssets "$UPG_GHPROJECT" "$versionNew")"
		if [[ -n "$assets" ]]; then
			urls="$assets"
			ammLog::Debug "Found release assets: $urls"

		# No asset found, try as a commit
		else
			typeset commit="${version#*_}"
			ammLog::Debug "No release matched. Trying as a commit"
			if ammHttp::GithubCommitExists "$UPG_GHPROJECT" "$commit"; then
				urls="$(ammHttp::GithubArchiveGetUrl "$UPG_GHPROJECT" "$commit")"
				ammLog::Debug "Found commit archive: $urls"
			else
				ammLog::Warning "Version '$versionNew' does not match a release nor a commit of github' '$UPG_GHPROJECT'"
			fi
		fi
	fi

	# Prepare temp folder
	typeset t
	for t in "$tmpdir" "$tmpsource" "$tmpextract" "$appdir"; do
		if ! [[ -e "$t" ]]; then
			ammLog::Debug "Creating folder '$t'"
			mkdir -p "$t"
		fi
	done
#		if ! [[ -e "$tmpdir" ]] && ! [[ -d "$tmpdir" ]]; then
#			ammLog::Warning "Destination folder exists but is not a folder. Moving it"
#			typeset suffix=".$(date +%y%m%d_%H%M%S)"
#			if ! mv "$appdir" "${appdir}${suffix}"; then
#				ammLog::Error "Unable to rename folder '$appdir' with suffix '$suffix'"
#				return 1
#			fi
#		fi



	#
	# 2) Download required content in tmpdir
	#
	if [[ -n "$urls" ]]; then

		ammLib::Require "http"
		for url in $urls; do

			typeset tmpdl="${url%%\?*}"      # Remove all URL options
			tmpdl="${tmpdl%/}"               # Remove trailing /
			tmpdl="$tmpsource/${tmpdl##*/}"  # Keep only last filename

			if [[ -s "$tmpdl" ]]; then
				ammLog::Info "File '$tmpdl' already present. Skipping"
			else
				ammLog::Info "Downloading '$url' to '$tmpdl'"
				typeset dlfile="$(ammHttp::FetchSmart "$url" "$tmpdl")"
				if ! [[ -s "$dlfile" ]]; then
					ammLog::Error "Error while fetching '$url'"
					r+=1
				fi
			fi
		done
	fi

	#
	# 3) Prepare content (compile, extract...)
	#

	# Custom preparation function
	if ammEnv::IsFunc "appUpgrade::Prepare"; then
		# Call custom function
		appUpgrade::Prepare "$versionNew" "$versionOld" "$tmpdir"
		r+=$?

	# Extract archives into extraction folder
	else
		# Look in temp folder for archive to extract
		typeset f
		for f in "$tmpsource/"*; do
			# If it's a file, maybe an archive to extract
			if [[ -f "$f" ]]; then

				# If an archive, extract it in temp folder
				if ammArchive::FormatFromFile "$f" >/dev/null; then
					if ! ammArchive::Extract "$f" "$tmpextract"; then
						ammLog::Error "Error while extracting archive '$f' to '$tmpextract'"
						r+=1
					fi
				fi
			fi
		done
	fi

	# If something during preparation failed
	if [[ $r -gt 0 ]]; then
		ammLog::Error "Preparation failed"
		ammLog::StepEnd $r
		return $r
	fi
	ammLog::StepEnd $r

	#
	# 4) Deploy to target folder
	#
	ammLog::StepBegin "Deploying new version to '$appdir'"

	if ammEnv::IsFunc "appUpgrade::Deploy"; then
		appUpgrade::Deploy "$versionNew" "$versionOld" "$tmpextract" "$appdir"
	else

		# Check for bin presency
		if [[ -n "${RUN_BIN:-}" ]]; then
			if ! [[ -e "$tmpextract/$RUN_BIN" ]]; then
				ammLog::Error "Unable to find '$RUN_BIN' in extracted folder '$tmpextract'"
				ammLog::StepEnd $r
				return 1
			fi
		fi

		(
			shopt -s dotglob
			cp -r "$tmpextract/"* "$appdir"
		)
		r+=$?
	fi
	ammLog::StepEnd $r

	#
	# 5) Generate / Use new configuration
	#
	ammLog::StepBegin "Generating and deploy new configuration"
	if ammEnv::IsFunc  "appUpgrade::Configure"; then
		appUpgrade::Configure "$versionNew" "$versionOld" "$appdir"
		r+=$?
	elif [[ -n "$RUN_CFG" ]]; then
		ammLog::Debug "Using '$RUN_CFG' (TODO! )"
		#cp "$RUN_CFG" "$CFG_ appdir"
	else
		ammLog::Info "No function 'appUpgrade::Configure'. Skipping"
	fi
	ammLog::StepEnd

	#
	# 6) Test the binary in standalone environment
	#
	ammLog::StepBegin "Testing new version in namespace"
	if ammEnv::IsFunc "appUpgrade::Test"; then
		# Generate a new network & fs namespace
		ammUpgradeTest "$versionNew" "$versionOld"
	else
		ammLog::Info "No function 'appUpgrade::Test'. Skipping"
	fi
	ammLog::StepEnd


	#
	# 7) Stop current version
	#
	ammLog::StepBegin "Stopping current version"
	ammApp::Stop
	ammLog::StepEnd $?

	#
	# 8) Call a snapshot on all services within the group
	#

	ammLog::StepBegin "Saving current state (snapshot) for easy rollback"
	r=0
	typeset snapname="svcupgrade-${APP_NAME}-$(date +%s)"
	if [[ -n "${RUN_REQUIRES:-}" ]]; then
		ammLog::Info "Will snapshot dependencies ($RUN_REQUIRES) as '$snapname'"

		typeset dep
		for dep in ${RUN_REQUIRES}; do
			typeset script="$APP_SDIR/${APP_GRPN}-$dep"
			if ! [[ -s "$script" ]] && [[ -x "$script" ]]; then
				script="$APP_SDIR/$dep"
				if ! [[ -s "$script" ]] && [[ -x "$script" ]]; then
					ammLog::Warning "Unable to find dependency '$dep' script in '$APP_SDIR'. Skipping"
					continue
				fi
			fi

			$script snapshot "$snapname"
			typeset scriptret=$?
			scriptretstr="${script##*/} returned '$scriptret'"

			case $scriptret in
				99) scriptretstr+=" (not implemented)" ;;
				1) scriptretstr+=" (failed)"; r+=1 ;;
			esac
			ammLog::Info "$scriptretstr"
		done
	fi

	# TODO call filesystem snapshot
	ammLog::Info "TODO: Calling filesystem Snapshot as '$snapname'"

	# Check if snapshot was successful
	if [[ $r -gt 0 ]]; then
		ammLog::Warning "Some snapshot failed"
		if ! ammInput::GetYN "upgradeContinueSnapFail" "Do you want to continue ?"; then
			ammLog::Info "Aborting. You'll want to remove '$snapname'"
			ammLog::StepEnd $r
			return 1
		fi
	fi
	ammLog::StepEnd $r

	#
	# 9) test the new version
	#
	ammLog::StepBegin "Testing new version with real data"
	if ammEnv::IsFunc "appUpgrade::Test"; then
		appUpgrade::Test "$versionNew"
		r=$?
	else
		RUN_VERS="$versionNew" ammApp::Start
		r=$?
	fi

	if [[ $r -gt 0 ]]; then
		ammLog::Error "Start/Test of new version failed. Check or consider rollback"
		ammLog::Error " - Logs: "
		ammLog::StepEnd $r
		return 1
	fi
	ammLog::StepEnd

	#
	# 10) Update current version to new version
	#
	ammLog::StepBegin "Setting version '$versionNew' as 'current'"
	ammApp::VersionSetCurrent "$versionNew"
	r+=$?
	ammLog::StepEnd $r


	# End of upgrade
	return $r
}


function ammApp::Main {
	typeset op="${1:-}"; shift

	if [[ -z "${APP_ROOT:-}" ]]; then
		ammLog::Error "The script didn't call ammApp::Init before ammApp::Main"
		return 99
	fi

	typeset -i r=0
	case "$op" in
		start)
			if ammApp::IsRunning; then
				ammLog::Warning "Already running"
			else
				ammApp::Start "$@"
				r=$?
			fi
			;;
		stop)
			ammApp::IsRunning || ammLog::Warning "Already stopped"
			ammApp::Stop "$@"
			r=$?
			;;
		restart)
			ammApp::IsRunning && ammApp::Stop "$@"
			ammApp::IsRunning || ammApp::Start "$@"
			r=$?
			;;
		status)
			ammApp::Status "$@"
			r=$?
			;;
		zap)
			ammApp::Zap "$@"
			r=$?
			;;
		upgrade)
			if ammString::IsTrue "${UPG_LIST:-false}"; then
				ammApp::VersionList
			else
				ammApp::Upgrade "$@"
				r=$?
			fi
			;;
		*)
			if ammEnv::IsFunc "appRun::$op"; then
				appRun::$op "$@"
			else
				ammLog::Error "Usage: $0 <start|stop|restart|status|upgrade>"

				typeset extrafuncs="$(grep "function appRun::" "$MYSELF"|grep -v '^#'|grep -Po 'appRun::[^ {]+')"
				if [[ -n "$extrafuncs" ]]; then
					typeset extrafunc extratxt
					for extrafunc in $extrafuncs; do
						[[ "$extrafunc" =~ ^(Start|Stop|Restart|Reload|Status) ]] && continue
						extratxt+="${extrafunc#appRun::}${extratxt:+ }"
					done
					ammLog::Error "Extra: $0 <${extratxt// /|}>"

					ammLog::Error "Add --help for more details"
				fi
			fi
			;;
	esac

	return $r
}


