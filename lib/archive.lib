# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

typeset -gA __AMMARCHIVE_PASSWORDS


function ammArchive::MetaCheck {
	ammExec::Require "file"
	ammLib::Loadable "string"
}

function ammArchive::MetaInit {
	ammLib::Require string

	__AMMARCHIVE_PASSWORDS=()
}

function ammArchive::LibLoad {
	typeset atype="$1"

	if ! ammLib::Load "archive.$atype"; then
			ammLog::Error "Cannot load required archive library '$atype'"
			return 1
	fi
}

## @arg onlyusable Shall only the usable functions be returned
function ammArchive::LibList {
	typeset onlyusable="${1:-false}"

	typeset sublib
	for sublib in $(ammLib::LocatePattern "archive.*"); do
		ammLog::Debug "Found sublib '$sublib'"

		if ammString::IsTrue "$onlyusable" && ! ammLib::Loadable $sublib >/dev/null; then
			ammLog::Debug "Unable to load $sublib"
			continue
		fi

		typeset libname="$(ammLib::NameFromPath "$sublib")"
		echo ${libname#archive.}

	done
}

# @description  Call the real function from the library
# @arg $1  (string) Operation to call on the sub-library
# @arg $2  (path)   file o
# @arg $3  (string) Format for the archive if not guessable from file
# @arg $@  (string[])  Options to pass to the called function
function ammArchive::_Proxy {
	typeset op="$1"
	typeset fmt="${2:-}"
	typeset file="${3:-}"
	shift 3

	# No format specified of discovery requested
	if [[ -z "$fmt" ]] || [[ "$fmt" == "auto" ]]; then
		if [[ -n "$file" ]]; then
			fmt="$(ammArchive::FormatFromFile "$file")"
			if [[ -z "$fmt" ]]; then
				ammLog::Error "Unable to guess format of '$file' from current system available modules"
				return 1
			fi
		else
			ammLog::Error "Unable to guess format from empty filename '$file'"
			return 1
		fi
	fi

	typeset func="ammArchive$fmt::$op"
	if ! ammEnv::IsFunc "$func"; then
		ammLog::Error "Function '$op' is not implemented with lib '$fmt'"
		return 1
	fi

	$func "$file" "$@"
}
# -----------------------------------------------------------------------------
# Format discovery / management
# -----------------------------------------------------------------------------

# @description  Get the archive format usable for library loading
# @arg $1  (path) Archive file to be checked for format
# @arg $2  (path) Optional format hint or fallback
function ammArchive::FormatFromFile {
	typeset -l file="$1"
	typeset fmt="${2:-}"

	typeset archfmt=""

	# First by filename
	case "${file#*/}" in
		*.tar.gz|*.tgz)     archfmt="tar" ;;
		*.tar.bz2|*.tbz2)   archfmt="tar" ;;
		*.tar.xz|*.txz)     archfmt="tar" ;;
		*.tar.lzma|*.tlzma) archfmt="tar" ;;
		*.cpio)             archfmt="cpio" ;;
		*.rpm)              archfmt="rpm" ;;
		*.deb)              archfmt="deb" ;;
		*.zip)              archfmt="zip" ;;
		*.iso)              archfmt="iso" ;;
		*Dockerfile)        archfmt="docker" ;;
	esac

	# If format found, use it
	if [[ -n "$archfmt" ]]; then
		echo "$archfmt"
		return 0

	# Filename did not found the format, try every available lib
	else
		for archfmt in $(ammArchive::LibList); do
			:
		done
	fi

	return 1
}


function ammArchive::Compress {
	typeset src="$1"
	typeset dst="${2:-}"
	typeset fmt="${3:-}"


	# If no format is specified, guess it from filename
	if [[ -z "$fmt" ]] && [[ -n "$dst" ]] && [[ "$dst" != "-" ]]; then
		fmt="${dst##*.}"
	fi

	# Not format given nor guessed, cannot do anything here
	if [[ -z "$fmt" ]]; then
		ammLog::Debug "Compression format not provided and cannot be guessed"
		return 0
	fi

	typeset -a compCmds=()
	case "$fmt" in
		*gz)     compCmds=("|gzip")  ;;
		*bz2)    compCmds=("bzip2") ;;
		*xz)     compCmds=("xz") ;;
		*lzma)   compCmds=("lzma" "xz --format=lzma") ;;
	esac

	typeset cmd=""

	# Search for a command that can handle this format
	for cmd in "${compCmds[@]}"; do
		# If the input is stream, needs a command that manages it
		[[ "$cmd" == "-" ]] && [[ "${cmd:0:1}" != "|" ]] && continue

		# Remove the optional stream indicator
		cmd="${cmd#|}"

		# If the binary is available, select it
		ammExec::Exists "${cmd%% *}" && break
	done

	if [[ -z "$cmd" ]]; then
		ammLog::Error "Cannot find a valid binary for format '$fmt' among '${compCmds[@]}'"
		return 1
	fi

	
}

function ammArchive::Uncompress {
	typeset src="$1"
	typeset dst="$2"
	typeset fmt="${3:-}"

	# If no format is specified, guess it from filename
	if [[ -z "$fmt" ]]; then
		fmt="${src##*.}"
	fi

	typeset -a uncompCmds=()
	case "$fmt" in
		*gz)     uncompCmds=("|gzip -cd" "|gunzip -c" "gunzip")  ;;
		*bz2)    uncompCmds=("bunzip2" "bzip2 -d") ;;
		*xz)     uncompCmds=("|unxz" "|xz --decompress") ;;
		*lzma)   uncompCmds=("|unlzma" "|xz --format=lzma") ;;
	esac


	typeset cmd=
	for cmd in "${uncompCmds[@]}"; do

		# If file is from stdin, 
		if [[ "$file" == "-" ]]; then
			:
		fi

	done

}

# -----------------------------------------------------------------------------
# Basic operations: create / unpack
# -----------------------------------------------------------------------------

# @description  Extract an archive
# @arg $1  (path) File to unpack
# @arg $2  (path) Folder to extract files to
# @arg $@  (path) Content to extract from the archive
function ammArchive::Unpack {
	typeset file="$1"
	typeset dest="$2"
	shift 2

	# Call the real function
	ammArchive::_Proxy "Unpack" "auto" "$file" "$dest" "$@"
}

# @description  Create an archive
# @arg $1  (path) File to create
# @arg $2  (path) Root folder to add in archive
# @arg $@  (path) optional: select files relative to root folder to add
function ammArchive::Pack {
	typeset file="$1"
	typeset rootdir="$2"
	shift 2

	# Call the real function
	ammArchive::_Proxy "Pack" "auto" "$file" "$rootdir" "$@"
}

# @description  Add a file or folder to an archive
# @arg $1  (file) Archive on which to add the file
# @arg $2  (path) optionnal prefix for the content to be added
# @arg $@  (path[]) Files or folders to be added to the archive
function ammArchive::Add {
	typeset file="$1"; shift

	typeset prefix=""

	ammArchive::_Proxy "Pack" "auto" "$file" "$dest"

}

# -----------------------------------------------------------------------------
# Specfic operations
# -----------------------------------------------------------------------------
function ammArchive::SetPassword {
	typeset file="$1"
	typeset pass="$2"

	__AMMARCHIVE_PASSWORDS[$file]="$pass"
}

function ammArchive::GetPassword {
	typeset file="$1"

	echo ${__AMMARCHIVE_PASSWORDS[$file]:-}
}

function ammArchive::SetEncryption {
	:
}


function ammArchive::SetCompressionLevel {
	typeset file="$1"
	typeset level="$2"

	__AMMARCHIVE_COMPLEVEL[$file]="$level"
}


