# vim: ft=sh ts=4


if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

typeset -g  AMMCHROOTCENTOS_URL_CLOUD
typeset -g  AMMCHROOTCENTOS_URL_VAULT
typeset -g  AMMCHROOTCENTOS_URL_MIRROR
typeset -g  AMMCHROOTCENTOS_URL_DEBUG
typeset -g  AMMCHROOTCENTOS_PATH_CACHE

typeset -gA AMMCHROOTCENTOS_VERSIONS
typeset -gA __AMMCHROOTCENTOS_VERSIONS
typeset -gA AMMCHROOTCENTOS_REPO_URLS
typeset -gA AMMCHROOTCENTOS_REPO_LIST
typeset -gA AMMCHROOTCENTOS_REPO_GPG

function ammChrootCentos::MetaCheck {
	ammLib::Loadable "pkg" "config"
}

function ammChrootCentos::MetaInit {
	ammLib::Require "pkg" "config"

	if ! ammLib::Load "pkg.yum"; then
		ammLog::UnavailableFunc "ammChrootCentos::InitFromPackages" "pkg.yum module cannot be loaded. Is yum binary available?"
	fi
	if ! ammLib::Load "http"; then
		ammLog::UnavailableFunc "ammChrootCentos::InitFromTemplate" "http module cannot be loaded"
	fi

	AMMCHROOTCENTOS_URL_CLOUD="https://cloud.centos.org"
	AMMCHROOTCENTOS_URL_VAULT="https://vault.centos.org"
	AMMCHROOTCENTOS_URL_MIRROR="https://mirror.centos.org"
	AMMCHROOTCENTOS_URL_DEBUG="http://debuginfo.centos.org"
	AMMCHROOTCENTOS_PATH_CACHE="$(ammLib::DataPathGet "cache")"

	__AMMCHROOTCENTOS_VERSIONS=(
		[6.7]="1601" [6.8]="1605" [6.9]="1704" [6.10]="1808"
		[7.0]="1406" [7.1]="1503" [7.2]="1511" [7.3]="1611" [7.4]="1708" [7.5]="1804" [7.6]="1810" [7.7]="1908" [7.8]="2003" [7.9]="2009"
		[8.0]="8.0.1905" [8.1]="8.1.1911-20200113.3" [8.2]="8.2.2004-20200611.2" [8.3]="8.3.2011-20201204.2"
	)
	__AMMCHROOTCENTOS_VERSIONS+=(
		[6]=${__AMMCHROOTCENTOS_VERSIONS[6.10]}
		[7]=${__AMMCHROOTCENTOS_VERSIONS[7.8]}
		[8]=${__AMMCHROOTCENTOS_VERSIONS[8.3]}
	)

	# Mirrorlist is only for latest version, else it's in the vault
	typeset repo vers
	for repo in os updates extras centosplus fasttrack BaseOS AppStream; do
		AMMCHROOTCENTOS_REPO_URLS[$repo]=$AMMCHROOTCENTOS_URL_VAULT'/$releasever/'$repo'/$basearch'
	done
	AMMCHROOTCENTOS_REPO_URLS[debuginfo]=$AMMCHROOTCENTOS_URL_DEBUG'/$releasever/$basearch/'

	# The latest ones have faster mirrorlist
	for v in 7 8; do
		#AMMCHROOTCENTOS_REPO_URLS[$repo]='mirrorlist:http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo='$repo'&infra=$infra'
		:
	done

	typeset v;
	for v in ${!__AMMCHROOTCENTOS_VERSIONS[@]}; do
		case "$v" in
			6*|7*)  AMMCHROOTCENTOS_REPO_LIST[$v]="os updates extras centosplus" ;;
			8*)     AMMCHROOTCENTOS_REPO_LIST[$v]="BaseOS AppStream" ;;
		esac
	done

	ammConfig::VarDeclare "AMMCHROOTCENTOS_VERSIONS"   "assoc"  "Additional versions available"
	ammConfig::VarDeclare "AMMCHROOTCENTOS_REPO_URLS"  "assoc"  "Repositories available: [id]=url"
	ammConfig::VarDeclare "AMMCHROOTCENTOS_REPO_LIST"  "assoc"  "Repositories selected from available: [CentOSversion]='id1 id2 id3...'"
	ammConfig::VarDeclare "AMMCHROOTCENTOS_URL_CLOUD"  "string" "Base URL for cloud.centos.org"
	ammConfig::VarDeclare "AMMCHROOTCENTOS_URL_VAULT"  "string" "Base URL for vault.centos.org"
	ammConfig::VarDeclare "AMMCHROOTCENTOS_URL_DEBUG"  "string" "Base URL for debuginfo.centos.org"
	ammConfig::VarDeclare "AMMCHROOTCENTOS_URL_MIRROR" "string" "Base URL for mirror.centos.org"
	ammConfig::VarDeclare "AMMCHROOTCENTOS_PATH_CACHE" "string" "Path to package cache"
	ammConfig::FileLoad "defaults.conf"

}

# -----------------------------------------------------------------------------
# Some description for your lib
# -----------------------------------------------------------------------------

function ammChrootCentos::_GetDataFolder {
	typeset extra="${1:-}"

	typeset f="$__AMMLIB_DATA/chroot.centos/$extra"
	[[ -d "$f" ]] || mkdir -p "$f"
	echo "$f"
}


# @description Init a new CentOS chroot, from host yum config or from template
function ammChrootCentos::Init {
	typeset chrootdir="$1"
	typeset version="$2"

	typeset -i r=0

	# Dispatch to the 
	if ammExec::Exists "yum"; then
		ammChrootCentos::InitFromPackages "$chrootdir" "$version"
		r=$?
	else
		ammChrootCentos::InitFromTemplate "$chrootdir" "$version"
		r=$?
	fi

	return $r
}

function ammChrootCentos::InitFromTemplate {
	typeset chrootdir="$1"
	typeset version="$2"
	typeset arch="${3:-x86_64}"

	typeset -i r=0


	# Generate the URL or use the ones set in configuration
	typeset -a urls
	case $version in
		8|8.*)
			typeset release=""
			typeset maj="${version:0:1}"

			# Lookup the target version (no symlink avail at the moment)
			if (set +u; [[ -n "${__AMMCHROOTCENTOS_VERSIONS[$version]}" ]] ); then
				release="${__AMMCHROOTCENTOS_VERSIONS[$version]}"
				ammLog::Debug "Mapping version '$version' to relase '$release'"
			fi

			# Check for custom version passed
			if [[ -z "$release" ]] && [[ "$version" != "$maj" ]]; then
				# Use can chose a specific release date, no just a maj.min release
				if [[ "$version" =~ $maj\..+ ]]; then
					release="${version#$maj.}"
				else
					ammLog::Error "Unmanaged release version: '$version'"
					return 1
				fi
			fi

			url="$AMMCHROOTCENTOS_URL_CLOUD/centos/8/${arch}/images/CentOS-8-Container"
			[[ -n "$release" ]] && url+="-$release"

			# For whatever reason, layers images are not always available...
			#urls+=("${url}.x86_64.tar.xz" "${url}-layer.x86_64.tar.gz")
			urls+=("${url}.x86_64.tar.xz")
			;;

		6|7|7.*|6.*)
			typeset release="" url=""
			typeset maj="${version:0:1}"

			# Map the release short name to full release number
			if (set +u; [[ -n "${__AMMCHROOTCENTOS_VERSIONS[$version]}" ]] ); then
				release="${__AMMCHROOTCENTOS_VERSIONS[$version]}"
				ammLog::Debug "Mapping version '$version' to relase '$release'"
			fi

			# Check mapping
			if [[ -z "$release" ]] && [[ "$version" != "$maj" ]]; then
				# Use can chose a specific release date, no just a maj.min release
				if [[ "$version" =~ $maj\..+ ]]; then
					release="${version#$maj.}"
				else
					ammLog::Error "Unmanaged release version: '$version'"
					return 1
				fi
			fi

			url="$AMMCHROOTCENTOS_URL_CLOUD/centos/$maj/images/CentOS-${maj}-${arch}-GenericCloud"
			[[ -n "$release" ]] && url+="-$release"
			url+=".raw.tar.gz"

			urls+=("$url")
			;;

		*)
			if (set +u; [[ -n "${AMMCHROOTCENTOS_VERSIONS[$version]}" ]] ); then
				# not putting double quotes here, as spaces in URL are %20, which leaves spaces as separator
				urls+=( ${AMMCHROOTCENTOS_VERSIONS[$version]} )
			else
				ammLog::Error "Unable to find a target url for template version '$version'"
				return 1
			fi
	esac

	# Check if we have something to fetch
	if [[ -z "$url" ]]; then
		ammLog::Error "Unable to get the URL for image version '$version'"
		return 1
	fi

	# Try to fetch the image (else, check on vault.centos.org)
	typeset url=""
	for url in "${urls[@]}"; do

		ammLog::Debug "Processing url '$url'"

		# Try to get the source from local storage
		typeset srcname="${url##*/}";
		typeset srcfilepath="$(ammLib::DataPathGet "images")/$srcname"

		# TODO: All of this should be handled by ammArchive::Unpack

		# try to get the rawfile extraction method from name (if needed)
		typeset rawfilepath="$srcfilepath"
		case "$srcname" in
			*.raw.tar.gz|*.raw.tar.xz|*.raw.tar.bz2) rawfilepath="${srcfilepath%.tar.*}" ;;
			# Skip tar archives
			*.tar.gz|*.tar.xz|*.tar.bz2) ;;
			*.xz)       rawfilepath="${srcfilepath%.*}"
		esac

		# TODO: place a lock here

		# If the archive does not already exists, generate it
		if ! [[ -s "$rawfilepath" ]]; then

			ammLog::Debug "Raw file '$rawfilepath' does not exists"

			typeset tmpfilepath="$(ammLib::TmpPathGet "image.$version")/${url##*/}"

			# Check if archive is already downloaded
			if ! [[ -s "$tmpfilepath" ]]; then

				# Download the image
				ammLog::Info "Downloading image '$url' as '$tmpfilepath'"
				typeset dlfilepath=
				if ! dlfilepath="$(ammHttp::FetchSmart "$url" "$tmpfilepath")"; then
					ammLog::Error "Unable to download image from '$url'"
					ammLog::Error "ammHttp::FetchSmart Output: $dlfilename"
					r+=1
				fi
			else
				ammLog::Info "Using already present compressed image '$tmpfilepath'"
			fi

			# If the archive is different (compressed) we'll need to uncompress it
			if [[ "$rawfilepath" != "$srcfilepath" ]]; then

				# Extract the compressed image
				ammLog::Info "Extracting tmp image to raw '$rawfilepath'"
				case "$tmpfilepath" in
					*.raw.tar.*)
						if ! tar -xp -C "${rawfilepath%/*}" -f "$tmpfilepath"; then
							ammLog::Error "Unable to extract data '$tmpfilepath'"
							return 1
						fi

						;;
					*.xz)
						if ! xz -d "$tmpfilepath"; then
							ammLog::Error "Unable to extract xz '$tmpfilepath'"
							return 1
						fi
						# Move archive to destination
						if ! mv "${tmpfilepath%.xz}" "$rawfilepath"; then
							ammLog::Error "Unable to move '${tmpfilepath%.xz}' to '$rawfilepath'"
							return 1
						fi
						;;
					*)
						ammLog::Error "Unable to pre-process '$tmpfilepath'. This is a bug, please report it"
						;;
				esac

			# Using the downloaded file directly
			else
				ammLog::Debug "Moving '$tmpfilepath' as '$rawfilepath'"
				mv "$tmpfilepath" "$rawfilepath"
			fi

			if ! [[ -s "$rawfilepath" ]]; then
				ammLog::Error "Archive didn't contain raw file '$rawfilepath'"
				return 1
			fi

		else
			ammLog::Debug "Raw file '$rawfilepath' already exists. Using it"
		fi

		# Extract uncompressed archive depending on type
		typeset preprocess=
		case "$rawfilepath" in
			*.tar.*)
				# tar in tar archive
				if [[ -n "$(tar -tf "$rawfilepath"|grep ^repositories)"  ]]; then
					# TODO: run extract tar as root
					preprocess="$(tar -x -O -f "$rawfilepath" --wildcards '*/layer.tar' | ammExec::AsUser "root" tar -x -C "$chrootdir")"
					if [[ $? -ne 0 ]]; then
						ammLog::Warning "tar output returned non-0. Output:"
						echo "$preprocess" | ammLog::Warning "-"
					fi

				# Simple archive
				else
					tar -xpf "$rawfilepath" -C "$chrootdir"
				fi
				;;
			*.raw) 
				# Mount temp filepath

				typeset lodev="$(ammExec::AsUser "root" losetup --find --show --read-only "$rawfilepath")"

				if [[ -z "$lodev" ]]; then
					ammLog::Error "Unable to mount raw file '$rawfilepath' using losetup"
					return 1
				fi

				# Mount image
				# Not all raw images have p1 partition...
				typeset mntdev="$lodev"

				# Try to use partx
				if ammExec::Exists "partx"; then
					ammLog::Info "Using partx to discover/configure partitions"
					ammExec::AsUser "root" partx -a "$mntdev"
				fi

				[[ -e "${mntdev}p1" ]] && mntdev+="p1"

				typeset mntpnt="$(ammLib::TmpPathGet "")/mnt.root"
				[[ -d "$mntpnt" ]] || mkdir -p "$mntpnt"
				if ! ammExec::AsUser "root" mount -o ro,loop "$mntdev" "$mntpnt"; then
					ammLog::Error "Unable to mount image '$mntdev' to '$mntpnt'"
					return 1
				fi

				# Copy archive to chroot
				ammLog::Info "Copying data from '$mntpnt' to '$chrootdir'"
				if ! ammExec::AsUser "root" cp -a "$mntpnt/." "$chrootdir"; then
					if ! [[ -d "$chrootdir/etc/centos-release" ]]; then
						ammLog::Error "Unable to copy files from '$mntpnt' to '$chrootdir' is incomplete. Check manually"
						return 1
					else
						ammLog::Warning "Copy seems ok, but returned with error. Trying to continue..."
						r+=1
					fi
				fi

				# Cleanup loopback mountpoints
				if ! ammExec::AsUser "root" umount "$mntpnt"; then
					ammLog::Error "Unable to umount dir '$mntpnt'. Please cleanup manually"
					r+=1
				fi

				if ! ammExec::AsUser losetup -d "$lodev" ; then
					ammLog::Error "Unable to stop loop '$lodev'. Please cleanup manually"
					r+=1
				fi

				;;
			*.qcow2)
				# Check for nbd module
				#qemu-nbd --connect=/dev/nbd0 "$rawfilepath"
				#mount /dev/nbd0p1 

				# Of if available: virt-tar-out
				# virt-tar-out -a  <image_name>.qcow2  /etc/ - | gzip --best > etc.tar

				# Or convert it
				# qemu-img convert -p -O raw oldfile.qcow2 newfile.raw

				ammLog::Error "qcow2 images are not yet supported"
				;;
			*)
				ammLog::Error "Unsupported archive format of '$rawfilepath'"
				return 1
		esac

	done

	return $r
}

# @description  Create a new chroot 
# @arg $1  (path) Location of the chroot to be created
# @arg $2  (string) Version of the CentOS release to be created
# @arg $@  (string) (optional) Tuples "name=url" of repositories to be set, instead of defaults
function ammChrootCentos::InitFromPackages {
	typeset chrootdir="$1"
	typeset version="$2"
	shift 2

	typeset versionRelease="$version.${__AMMCHROOTCENTOS_VERSIONS[$version]}"
	case $version in
		7)
			# TODO: This this...
			typeset vtmp="7.8"
			versionRelease="$vtmp.${__AMMCHROOTCENTOS_VERSIONS[$vtmp]}"
			;;
	esac

	# Create db from the host rpm version
	ammPkgRpm::DbInit "$chrootdir"

	#
	# Configure Yum
	#

	ammPkgYum::ReleaseSet "$chrootdir" "$versionRelease"

	typeset repoRoot="$chrootdir/etc/yum.repos.d"
	typeset repoNew="$repoRoot/default.repo"
	typeset repoOld="$repoRoot/disabled"

	# Set provided repos
	if [[ $# -gt 0 ]]; then
		typeset repo
		for repo in "$@"; do
			typeset name="${repo%%=*}" url="${repo#*=}"
			ammPkgYum::RepoConfigure "$repoNew" "" "$name" "$url"
		done
	# Or use default ones
	else
		typeset repoid repourl
		for repoid in ${AMMCHROOTCENTOS_REPO_LIST[$version]}; do
			for repourl in ${AMMCHROOTCENTOS_REPO_URLS[$repoid]}; do
				ammPkgYum::RepoConfigure "$repoNew" "$repoid" "" "$repourl"
			done
		done
	fi

	# Cleanup the repo config
	sed -i "$repoNew" -Ee '/^mirrorlist=/s/^/#/' -e "/#baseurl/s/^#//"


	# Download the release files from our host yum version
	typeset pkgpath="$AMMCHROOTCENTOS_PATH_CACHE/pkgs.$version"
	ammPkgYum::Download "$chrootdir" "$pkgpath" "centos-release"

	# Install minimum in chroot
	ammPkgRpm::Install "$chrootdir" "$pkgpath/centos-release"*

	# Remove automatically added repos
	[[ -d "$repoOld" ]] || mkdir --parents "$repoOld"
	mv "$chrootdir/etc/yum.repos.d/CentOS-"*  "$repoOld"

	# Import keys from chroot (or elsewhere)
	ammPkgRpm::GpgKeyImport "$chrootdir" "$chrootdir/etc/pki/rpm-gpg/RPM-GPG-KEY-"*

	# Install yum from the host configuration
	if ! ammPkgYum::Install --installroot="$chrootdir" \
	    --setopt=cachedir="$chrootdir/var/cache/yum" \
	    --setopt=tsflags='nodocs' \
	    --setopt=override_install_langs=en_US.utf8 \
	    --nogpgcheck -y \
	    rpm yum; then

		ammLog::Error "Installation error of rpm/yum in '$chrootdir'"
		return 1
	fi

	# remove default repos again, coming from previous yum package installation
	rm "$chrootdir/etc/yum.repos.d/CentOS-"*

	# Note: for DNF, already looks in --installroot
	#    --setopt=reposdir="$chrootdir/etc/yum.repos.d" \
	#    --setopt=logfile="$chrootdir/var/log/yum.log" \
	#    --setopt=config_file_path="$chrootdir/etc/yum/yum.conf" \

	# Avoid installation of docs and other langs
	typeset yumcfg="$chrootdir/etc/yum.conf"
	ammPkgYum::ConfigSet "$yumcfg" "override_install_langs" "en_US.utf8"
	ammPkgYum::ConfigSet "$yumcfg" "tsflags"                "nodocs"
	ammPkgYum::ConfigSet "$yumcfg" "plugins"                "1"

	# Remove non-native RPMdb (from host)
	ammExec::AsUser "root" mv "$chrootdir/var/lib/rpm" "$chrootdir/var/lib/rpm.host"
	ammChroot::Exec "$chrootdir" rpm --initdb
	typeset key
	for key in "$chrootdir/etc/pki/rpm-gpg/RPM-GPG-KEY-"*; do
		ammChroot::Exec "$chrootdir" rpm --import "${key#$chrootdir}"
	done

	# And reinstall from the target repo config
	ammChroot::Exec "$chrootdir" yum install -y yum rpm
	
	# and remove default repos, yet again
	rm "$chrootdir/etc/yum.repos.d/CentOS-"*
}


function ammChrootCentos::Populate {
	typeset chrootdir="$1"
	typeset version="$2"

	typeset -i r=0

	# Base system
	typeset pkgs="basesystem bash filesystem"
	pkgs+=" rpm yum rpm-build ca-certificates"

	case $version in
		6.*|7.*)
			# Services
			pkgs+=" initscripts"
			# Core utils
			pkgs+="busybox mingetty date"
			;;
	esac

	# Core
	pkgs+=" chkconfig procps-ng iputils"
	# Utils and tools
	pkgs+=" bzip2 gawk grep gzip info less"
	pkgs+=" ncurses sed tar which wget"
	# Build
	#pkgs+="elfutils findutils gcc make strace"

	# Install base packages
	ammChroot::Exec "$chrootdir" yum -y install $pkgs
	r+=$?

	# Update all packages
	ammChroot::Exec "$chrootdir" yum -y update
	r+=$?

	return $r
}

# @description: remove all non-necessary files
function ammChrootCentos::Clean {
	typeset chrootdir="$1"

	ammChroot::Exec "$chrootdir" "yum clean all"
}

