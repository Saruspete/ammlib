# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammChroot::MetaCheck {
	ammExec::Require awk
	ammLib::Require  fs string config
}

function ammChroot::MetaInit {
	ammLib::Load  fs string config
	ammChroot::_OSInit
}
# -----------------------------------------------------------------------------
# Sub-libraries management
# -----------------------------------------------------------------------------

# Scan and populate the OS List
function ammChroot::_OSInit {
	(set +u; [[ -n "${__AMMCHROOT_OS:-}" ]] ) && return 0

	for sublib in $(ammLib::LocatePattern "chroot.*"); do
		typeset sublibname="${sublib#*.}"; sublibname="${sublibname%.lib}"
		ammLog::Debug "Trying to load sublib $sublib"
		if ammLib::Loadable "$sublib"; then
			ammLib::Require "$sublib"
			__AMMCHROOT_OS+=("$sublibname")
		else
			ammLog::Warning "Unable to load '$sublib'"
		fi
	done

	if [[ -z "${__AMMCHROOT_OS:-}" ]]; then
		ammLog::Warning "No chroot sublib was loaded. Chroot unavailable"
		return 1
	fi

	echo "${__AMMCHROOT_OS[@]}"
}

function ammChroot::_OSCall {
	typeset osname="$(ammString::ToCapital "$1")"
	typeset func="$(ammString::ToCapital "$2")"
	shift 2

	typeset fname="ammChroot${osname}::${func}"
	if ammEnv::IsFunc "$fname"; then
		$fname "$@"
	else
		ammLog::Warning "Requested function '$func' is not available for OS '$osname'"
		return 1
	fi
}



# -----------------------------------------------------------------------------
# Local repositories and versions
# -----------------------------------------------------------------------------


# CentOS: http://mirror.centos.org/centos/$release/os/x86_64

function ammChroot::OSNameValidate {
	typeset name="$1"

	ammChroot::_OSInit
	ammString::ContainsWord "$name" "$__AMMCHROOT_OS"
}

function ammChroot::OSNameList {
	ammChroot::_OSInit
	echo "${__AMMCHROOT_OS[@]}"
}

function ammChroot::DirValidate {
	typeset chrootdir="$1"

	[[ -d "$chrootdir" ]] && [[ "$(realpath "$chrootdir")" != "/" ]]
}

function ammChroot::ChrootValidate {
	typeset chrootdir="$1"

	ammChroot::DirValidate "$chrootdir" || return 1
	[[ -d "$chrootdir/proc" ]]
}


# -----------------------------------------------------------------------------
# Chroot runtime helpers
# -----------------------------------------------------------------------------

function ammChroot::Mounted {
	typeset mntpnt="$1"
	typeset mntopts="${2:-}"

	# If the folder doesn't exists, it cannot be mounted
	! [[ -d "$mntpnt" ]] && return 1

	mntpnt="$(realpath "$mntpnt")"

	typeset mnt="$(awk '$2 == "'$mntpnt'"{ print $4}' /proc/self/mounts)"

	# We got a mountpoint
	if [[ -n "$mnt" ]]; then
		# If we seek a specific mountopts
		if [[ -n "$mntopts" ]]; then
			for mntneed in ${mntopts//,/ }; do
				for mntgot in ${mnt//,/ }; do
					[[ "${mntneed,,}" == "${mntgot,,}" ]] && continue
				done

				# We are still here, we didn't find our option
				ammLog::Warning "Didn't find requested opt: $lntneed in $mnt"
				return 1
			done
		fi

		return 0
	fi

	# Still here, not mounted
	return 1
}


function ammChroot::Mount {
	typeset chrootdir="$1"
	typeset mntsrc="$2"
	typeset mntdst="${3:-}"
	typeset mntopts="${4:-}"

	typeset mnttype=""

	case "$mntsrc" in
		proc)   mntsrc="proc"     ; mnttype="proc"    ; : ${mntdst:=$chrootdir/proc} ;;
		dev)    mntsrc="devtmpfs" ; mnttype="devtmpfs"; : ${mntdst:=$chrootdir/dev}  ;;
		devpts) mntsrc="devpts"   ; mnttype="devpts"  ; : ${mntdst:=$chrootdir/dev/pts} ;;
		sys)    mntsrc="sys"      ; mnttype="sysfs"   ; : ${mntdst:=$chrootdir/sys}  ;;
		tmpfs)  mntsrc="tmpfs"    ; mnttype="tmpfs"   ; : ${mntdst:=$chrootdir/run}  ;;
		debugfs)mntsrc="debugfs"  ; mnttype="debugfs" ; : ${mntdst:=$chrootdir/sys/kernel/debug} ;;
		*)
			# If source is a folder, use bindmount
			[[ -d "$mntsrc" ]] && mntopts+="${mntopts:+,}bind"
			;;
	esac

	# If we didn't specify dst, assume it in chroot
	[[ -z "$mntdst" ]] && mntdst="$chrootdir/$mntsrc"

	# Mount the target
	if ! [[ -d "$mntdst" ]]; then
		ammLog::Info "Target mount '$mntdst' does not exists. Creating"
		mkdir -p "$mntdst"
	fi

	if ammChroot::Mounted "$mntdst"; then
		ammLog::Debug "Mountpoint '$mntdst' already mounted"
		return 0
	fi

	# Do the mount
	ammExec::AsUser "root" "mount" ${mnttype:+-t $mnttype} ${mntopts:+-o $mntopts} "$mntsrc" "$mntdst"
}

function ammChroot::MountList {
	typeset basedir="$1"
	basedir="${basedir%/}"

	typeset mounts="$(awk '$2 ~ /^'$basedir'/{ print $2}')"

	echo "$mounts"
	[[ -n "$mounts" ]]
}

function ammChroot::Umount {
	typeset chrootdir="$1"
	typeset mnt="$2"

	typeset dev mntpnt fstyp opts _junk
	while read dev mntpnt fstyp opts _junk; do
		ammLog::Info "Umount '$mnt' (dev:$dev fstyp:$fstyp opts:$opts)"
		umount "$mntpnt" 2>/dev/null
	done < <(awk '$2=="'$mnt'" {print $2}' /proc/self/mounts|sort -r)
}


function ammChroot::Start {
	typeset chrootdir="$1"

	if ! ammChroot::DirValidate "$chrootdir"; then
		ammLog::Error "Invald chroot to start '$chrootdir'"
		return 1
	fi

	# Mount minimum chroot
	typeset mnt
	for mnt in proc dev devpts sys tmpfs; do
		if ! ammChroot::Mounted "$chrootdir/$mnt"; then
			ammChroot::Mount "$chrootdir" "$mnt"
		fi
	done
}

function ammChroot::Stop {
	typeset chrootdir="$1"

	if ! ammChroot::DirValidate "$chrootdir"; then
		ammLog::Error "Invald chroot to exec inside '$chrootdir'"
		return 1
	fi

	# 0: kill all process using the fs
	ammLog::Info "Killing all processes using the chroot (TODO)"
	# TODO

	# 1: umount all fs under the chroot (normal, then force, then lazy)
	ammLog::Info "Umounting folders under '$chrootdir'"
	typeset mnt
	for mnt in $(awk '$2~/'${chrootdir////\\/}'/ {print $2}' /proc/mounts | sort -r); do
		if ! ammExec::AsUser "root" umount "$mnt"; then
			ammLog::Warning "Unable to umount path '$mnt'"
		fi
	done

	return 0
}

# @description  Execute a command inside a cheroot (ensure mounts are ok)
function ammChroot::Exec {
	typeset chrootdir="$1"
	shift

	if ! ammChroot::DirValidate "$chrootdir"; then
		ammLog::Error "Invald chroot to exec inside '$chrootdir'"
		return 1
	fi

	# Call start
	ammChroot::Start "$chrootdir"

	# And exec
	ammExec::AsUser "root" "chroot" "$chrootdir" "$@"
}
# -----------------------------------------------------------------------------
# Chroot creation / destruction
# -----------------------------------------------------------------------------

function ammChroot::Create {
	typeset chrootdir="$1"
	typeset osname="$2"
	typeset osvers="${3:-}"

	# TODO: Create a safe path creation for that
	if ! [[ -d "$chrootdir" ]]; then
		mkdir -p "$chrootdir"
	fi
	chrootdir="$(realpath "$chrootdir")"

	# Check if folder is clean
	if [[ -d "$chrootdir/usr" ]] || [[ -d "$chrootdir/etc" ]]; then
		ammLog::Error "The target chroot '$chrootdir' already contains a /etc or /usr folder"
		return 1
	fi

	# Prepare base files
#	echo "#!/bin/bash" > "$chrootdir/$_CHROOT_FILECMD"
#	chmod +x "$dest/$_CHROOT_FILECMD"
#	mkdir "$dest/$_CHROOT_PATHPKG"

	ammLog::StepBegin "Creating new chroot in '$chrootdir'"

	ammLog::StepBegin "Populate common files and folders"
	# Bind mount
	ammLog::Info "Mounting system mounts"
	typeset dir
	for dir in proc sys dev devpts tmpfs; do
		ammChroot::Mount "$chrootdir" "$dir"
	done

	# Copy resolv.conf (might be needed for package manager installation)
	mkdir -p "$chrootdir/etc"
	ammLog::Info "Copying host resolv.conf"
	cp -f "/etc/resolv.conf" "$chrootdir/etc/resolv.conf"

	ammLog::StepEnd


	ammLog::StepBegin "Initializing OS '$osname'"
	ammChroot::_OSCall "$osname" "Init" "$chrootdir" "$osvers" || return $?

	if ! [[ "/etc/resolv.conf" -ef "$chrootdir/etc/resolv.conf" ]]; then
		ammLog::Info "resolv.conf has been overwritten. Copying again"
		mv "$chrootdir/etc/resolv.conf"{,.chrootbak.$$}
		cp -f "/etc/resolv.conf" "$chrootdir/etc/resolv.conf"
	fi

	# Touch some files, cause dumb stuff happens...
	touch "$chrootdir/etc/fstab"

	# Create the base system
	ammLog::Info "Populating the chroot with OS manager"
	if ! ammChroot::_OSCall "$osname" "Populate" "$chrootdir" "$osvers"; then
		ammLog::Error "Error during populating chroot '$chrootdir'"
		return 1
	fi

	ammLog::StepEnd

	# TODO: Fixing some init-related stubs

	ammLog::StepEnd
}

function ammChroot::Destroy {
	typeset chrootdir="$(realpath $1)"

	if ! ammChroot::DirValidate "$chrootdir"; then
		ammLog::Error "Invalid chroot: '$chrootdir'"
		return 1
	fi


	ammLog::StepBegin "Destroying chroot '$chrootdir'"
	
	if ! ammChroot::Stop "$chrootdir"; then
		ammLog::Error "Cannot stop chroot '$chrootdir'"
		ammLog::StepEnd 1
		return 1
	fi

	# 2: Remove all data
	rm -rf --one-file-system "$chrootdir"
	
	# Return if the root-folder was successfuly removed
	if [[ -e "$chrootdir" ]]; then
		ammLog::StepEnd 1 "Folder '$chrootdir' still exists"
		return 1
	else
		ammLog::StepEnd 0 "Folder '$chrootdir' successfully destroyed"
		return 0
	fi
}

function ammChroot::SetKernel {
	typeset chrootdir="$1"
	typeset kvers="$2"
	typeset installdevpkgs=true

	# TODO: Install kernel + devel packages

	# Create a uname wrapper for these dumb creators using "uname -r"
	[[ ! -e "$chrootdir/bin/uname.bin" ]] && mv "$chrootdir/bin/uname" "$chrootdir/bin/uname.bin"

	echo "$kver" > "$chrootdir/bin/uname.kver"
	cat >"$chrootdir/bin/uname" <<-'EOT'
	#!/bin/bash

	typeset    UNAME_BIN="/bin/uname.bin"
	typeset    REAL_KVER="$($UNAME_BIN -r)"
	typeset    FAKE_KVER="$(cat $0.kver)"

	# Get the real output
	OUTPUT="$($UNAME_BIN $@)"

	# And replace the version by our fake
	echo "${OUTPUT/$REAL_KVER/$FAKE_KVER}"
	EOT

	chmod +x "$chrootdir/bin/uname"
}

