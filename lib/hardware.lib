# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammHardware::MetaCheck {
	ammLib::Loadable string
	ammExec::Require lspci

}
function ammHardware::MetaInit {
	ammLib::Require string

	typeset -g __AMMHARDWARE_DB_PCI=
	typeset -g __AMMHARDWARE_DB_USB=
	typeset -g __AMMHARDWARE_DB_OUI="$(ammLib::DataPathGet "db")/oui.txt"
}

function ammHardware::DbIdInit {

	# already init
	[[ -n "$__AMMHARDWARE_DB_PCI" ]] && [[ -n "$__AMMHARDWARE_DB_USB" ]] && return

	typeset dbpath
	# First plain-ids
	for dbpath in "/usr/share/hwdata/pci.ids" "/usr/share/misc/pci.ids"; do
		[[ -e "$dbpath" ]] && __AMMHARDWARE_DB_PCI="$dbpath"
	done
	# TODO: Next, try .gz if we have gunzip

	for dbpath in "/usr/share/hwdata/usb.ids" "/usr/share/misc/usb.ids"; do
		[[ -e "$dbpath" ]] && __AMMHARDWARE_DB_USB="$dbpath"
	done
	# TODO: Next, try .gz if we have gunzip

	if [[ -z "$__AMMHARDWARE_DB_PCI" ]] && [[ -z "$__AMMHARDWARE_DB_USB" ]]; then
		ammLog::Warning "Cannot init HW-ID DBs"
		return 1
	fi

	return 0
}

function ammHardware::DbOuiInit {


	# Fetch db if not existing
	if ! [[ -e "$__AMMHARDWARE_DB_OUI" ]]; then

		typeset url="http://standards-oui.ieee.org/oui/oui.txt"
		if ! ammLib::Load "http"; then
			ammLog::Error "Cannot load http module, so cannot fetch oui.txt from '$url' to '$__AMMHARDWARE_DB_OUI'"
			return 1
		fi

		ammLog::Debug "Fetching '$url' into '$__AMMHARDWARE_DB_OUI'"
		if ! ammHttp::Fetch "$url" "$__AMMHARDWARE_DB_OUI"; then
			ammLog::Error "Cannot fetch oui.txt from '$url' to '$__AMMHARDWARE_DB_OUI'. Do it manually to fix it"
			return 1
		fi
	fi

	[[ -e "$__AMMHARDWARE_DB_OUI" ]]
}

# -----------------------------------------------------------------------------
# Vendor ID related (pci-id, usb-id, oui.txt)
# -----------------------------------------------------------------------------

# @description  Get the vendor detail from th PCI-IDS DB
function ammHardware::PciVendorNameFromId {
	typeset vendorid="$1"

	ammHardware::DbIdInit

	# Default to the given ID
	typeset vendor="$vendorid"
	typeset pcidb="$__AMMHARDWARE_DB_PCI"
	if [[ -n "$vendorid" ]] && [[ -e "$pcidb" ]]; then
		vendor="$(grep "^${vendorid#0x}" "$pcidb" 2>/dev/null)"
		vendor="${vendor#* }"
	fi
	echo "${vendor# }"
}

# @description  Get the vendor detail from th PCI-IDS DB
function ammHardware::PciDeviceNameFromId {
	typeset -l vendorid="$1"
	typeset -l deviceid="$2"

	ammHardware::DbIdInit

	# Default to the given ID
	typeset vendor="$vendorid" device="$deviceid"
	typeset pcidb="$__AMMHARDWARE_DB_PCI"

	if [[ -n "$vendorid" ]] && [[ -n "$deviceid" ]] && [[ -e "$pcidb" ]]; then
		awk -v vendorId="${vendorid#0x}" -v deviceId="${deviceid#0x}" '
			# Quick selection to our vendorid
			match($0,/^([0-9a-f]+)/,a) {
				if (a[1] == ""vendorId)
					doProcess=1
				else
					doProcess=0
				next
			}
			# In our current vendor, search device
			doProcess && match($0,/^\t([0-9a-f]+)/,a) {
				if (a[1] == ""deviceId) {
					for (i=2; i<=NF; i++)
						printf $i" "
				}
			}
			' "$pcidb"
	fi
}


# @description  Get the vendor detail from th PCI-IDS DB
function ammHardware::PciVendorIdFromName {
	typeset vendorid="$1"

	ammHardware::DbIdInit

	# Default to the given ID
	typeset vendor="$vendorid"
	typeset pcidb="$__AMMHARDWARE_DB_PCI"
	if [[ -n "$vendorid" ]] && [[ -e "$pcidb" ]]; then
		vendor="$(grep "^${vendorid#0x}" "$pcidb" 2>/dev/null)"
		vendor="${vendor#* }"
	fi
	echo "${vendor# }"
}


function ammHardware::UsbVendorNameFromId {
	typeset vendorid="$1"

	ammHardware::DbIdInit

	# Default to the given ID
	typeset vendor="$vendorid"
	typeset usbdb="$__AMMHARDWARE_DB_USB"
	if [[ -n "$vendorid" ]] && [[ -e "$usbdb" ]]; then
		vendor="$(grep "^${vendorid#0x}" "$usbdb")"
		vendor="${vendor#* }"
	fi
	echo "${vendor# }"
}

# function ammHardware::UsbVendorIdFromName
# function ammHardware::UsbDeviceNameFromId


# @description  Get the vendor detail from a given OUI (MacAddr, etc..)
# @args $1  OuiID (string) VendorID
function ammHardware::OuiVendorNameFromId {
	typeset -u vendorid="$1"

	ammHardware::DbOuiInit || return

	# Only keep the 6 first hex chars
	vendorid="${vendorid//[^0-9A-F]/}"
	vendorid="${vendorid:0:6}"

	[[ -z "$vendorid" ]] && return

	typeset id b1 b2 vendor
	while read id b1 b2 vendor; do
		[[ "$b1$b2" != "(base16)" ]] && continue
		echo "$id $vendor"
	done < <(grep "^${vendorid:0:6}" "$__AMMHARDWARE_DB_OUI")
}

# @description  Get the allocated OUI for a given name
# @stdout  OUI VendorName
function ammHardware::OuiVendorOuiFromName {
	typeset name="$1"

	ammHardware::DbOuiInit || return

	typeset id b1 b2 vendor
	while read id b1 b2 vendor; do
		echo "$id $vendor"
	done < <(grep " (base 16)" "$__AMMHARDWARE_DB_OUI" | grep -i "$name")
}


# -----------------------------------------------------------------------------
# Expansion devices (pcie, usb)
# -----------------------------------------------------------------------------

function ammHardware::_PciDeviceSysfs {
	typeset deviceId="$1"
	typeset method="${2:-}"
	typeset value="${3:-}"

	# Fix domain as 0000 (should you have bullion or superdome-x, please implement it)
	typeset pcipath="/sys/bus/pci/devices/0000:$deviceId"
	if ! [[ -d "$pcipath" ]]; then
		ammLog::Error "Invalid deviceId '$deviceId'"
		return 1
	fi

	# No method, display the pcipath
	if [[ -z "$method" ]]; then
		echo "$pcipath"
		return 0

	# Method requested, check what to do
	else
		typeset pciPathMethod="$pcipath/$method"
		if [[ -e "$pciPathMethod" ]]; then
			# Provided value to write
			if [[ -n "$value" ]]; then
				# Try to write directly
				if [[ -w "$pciPathMethod" ]]; then
					echo -n "$value" > "$pciPathMethod"
					return $?
				# Try with a helper
				else
					echo -n "$value" | ammExec::AsUser "root" tee "$pciPathMethod" 2>/dev/null
					return $?
				fi
			# Just read / check file is here
			else
				# Don't drop error on write-only files
				if [[ -r "$pciPathMethod" ]]; then
					cat "$pciPathMethod"
				fi
				return 0
			fi
		fi
	fi

	return 1
}

# @description  Get summary (pciid, devtype, vendor, device id
function ammHardware::PciDeviceSummary {

	if ! ammExec::Exists lspci; then
		ammLog::Error "Cannot find 'lspci' binary to enumerate devices"
		return 1
	fi

	typeset line
	while read -r line; do
		# Remove the -r & -p
		line="${line/ -[pr][a-f0-9][a-f0-9] / }"
		eval "typeset -a data=($line)"
		echo "pciid=\"${data[0]}\" devtype=\"${data[1]}\" vendor=\"${data[2]}\" device=\"${data[3]}\" version=\"${data[4]}\""
	done < <(lspci -mm)

	# Possible fallback: parse /sys/.../device/config  (Beware, values are in BigEndian
	# Config values are defined in drivers/pci/pci-sysfs.c :: pci_read_config()
	# 0x00:
	# - 0-1 bytes,   Vendor-ID
	# - 2-3 bytes,   Device-ID
	# -   8 bytes,   Revision-num
	# - 9-11 bytes,  Device-Class
	# 0x20:
	# - 12-13 bytes, Subsystem-Vendor-iD
	# - 14-15 bytes, subsystem-model-id
}

function ammHardware::PciDeviceDetail {
	typeset deviceId="$1"

	typeset pcipath="$(ammHardware::_PciDeviceSysfs "$deviceId")"
	[[ -z "$pcipath" ]] && return 1

	if [[ -e "$pcipath" ]]; then
		for param in {current,max}_link_{speed,width} irq numa_node enable; do
			# Using cat to avoid stderr
			echo -n "$param=\"$(cat "$pcipath/$param" 2>/dev/null)\" "
		done

		if [[ -e "$pcipath/driver" ]]; then
			typeset drv="$(readlink -f "$pcipath/driver")"
			echo -n "driver=\"${drv##*/}\" "
		fi
	fi
}

function ammHardware::PciDeviceRescan {

	typeset sysRescan="/sys/bus/pci/rescan"

	if [[ -w "$sysRescan" ]]; then
		echo 1 > "$sysRescan"
		return $?
	else
		echo 1 | ammExec::AsUser "root" tee "$sysRescan" 2>/dev/null
		return $?
	fi
}

function ammHardware::PciDeviceReset {
	typeset deviceId="$1"

	typeset pcipath="$(ammHardware::_PciDeviceSysfs "$deviceId")"
	[[ -z "$pcipath" ]] && return 1

	# If the device can be reset
	if ammHardware::_PciDeviceSysfs "$deviceId" "reset"; then
		ammHardware::_PciDeviceSysfs "$deviceId" "reset" "1"
		if [[ $? -eq 0 ]]; then
			return 0
		fi

		# Still there?
		ammLog::Error "Cannot reset device '$deviceId' gracefully. Trying forcefully"
	fi

	# Cannot reset gracefully. Try to remove + rescan
	if ! ammHardware::PciDeviceRemove "$deviceId"; then
		ammLog::Error "Cannot remove pci device '$deviceId'. Stopping"
		return 1
	fi

	if ! ammHardware::PciDeviceRescan; then
		ammLog::Error "Cannot trigger pci-rescan."
		return 1
	fi

	return 0
}

function ammHardware::PciDeviceRemove {
	typeset deviceId="$1"

	ammHardware::_PciDeviceSysfs "$deviceId" "remove" "1"
}


# -----------------------------------------------------------------------------
# System / Core
# -----------------------------------------------------------------------------

function ammHardware::SystemSummary {

	# Get DMI data if available
	typeset sysdmi="/sys/devices/virtual/dmi/id"
	typeset -a elems="$@"

	if [[ -z "${elems:-}" ]]; then
		elems=(
			bios-{vendor,version,release-date,revision}
			system-{manufacturer,product-name,version,serial-number,family}
			baseboard-{manufacturer,product-name,version,serial-number,asset-tag}
			chassis-{manufacturer,type,version,serial-number,asset-tag}
		)
	fi

	typeset name
	for name in "${elems[@]}"; do

		typeset namedmi="$name"
		# Try to map from dmidecode to sysfs:
		namedmi="${namedmi/system-manufacturer/sys_vendor}"
		# system => product, baseboard => board
		namedmi="${namedmi/#system/product}"
		namedmi="${namedmi/#baseboard/board}"
		# Other renamings
		namedmi="${namedmi/%serial-number/serial}"
		namedmi="${namedmi/%product-name/name}"
		namedmi="${namedmi/%sku-number/sku}"
		namedmi="${namedmi/%manufacturer/vendor}"
		# map - to _ for sysfs
		namedmi="${namedmi//-/_}"

		typeset sysdmifile="$sysdmi/$namedmi"
		typeset dmival=""
		if [[ -r "$sysdmifile" ]]; then
			dmival="$(< $sysdmifile)"
		else
			# No mapping found, try with dmidecode
			dmival="$(ammExec::AsUser "root" dmidecode -s "$name")"
		fi

		echo "${name//-/_}=\"${dmival//"/\\"}\" "
	done
}


# -----------------------------------------------------------------------------
# NUMA
# -----------------------------------------------------------------------------


function ammHardware::NumaSummary {

	typeset -a numanodes numacpus numacount numasmt cpuids memsize
	typeset    numapath key val cpumodel cpuucode
	typeset -i cpuid currnode

#set -x
	#
	# Parse /proc/cpuinfo
	#
	ammLog::Debug "Listing CPUs from /proc/cpuinfo"
	while IFS=: read key val; do
		# Empty line will be the end of first block
		[[ -z "$key" ]] && break

		case $key in
			model\ name*)   cpumodel="${val# }" ;;
			microcode*)     cpuucode="${val# }" ;;
		esac
	done < /proc/cpuinfo

	#
	# Discover numa nodes from /sys
	#
	ammLog::Debug "Listing NUMA nodes from /sys"
	for numapath in /sys/devices/system/node/node[0-9]*; do
		typeset numaid="${numapath##*node}"
		typeset cpulist="$(< $numapath/cpulist)"
		typeset meminfo="$(< $numapath/meminfo)"

		numanodes+=("$numaid")
		# As we don't know yet, set 0
		numasmt[$numaid]=0

		# CPU listing
		typeset cpupath
		typeset -i cpucnt=0
		# Numbering will be lexicographic instead of numeric
		for cpupath in $numapath/cpu[0-9]*; do
			typeset -i cpuid="${cpupath##*cpu}"
			if [[ "$cpucnt" == 0 ]]; then
				typeset threadPath="$cpupath/topology/thread_siblings_list"
				if [[ -r "$threadPath" ]]; then
					typeset threadIds="$(<"$threadPath")"
					threadIds="${threadIds//[^,]/}"
					# Number of threads is 1  + the number of separators
					numasmt[$numaid]="$((1 + ${#threadIds}))"
				fi
			fi
			numacpus[$numaid]+="$cpuid,"
			cpucnt+=1
		done
		numacount[$numaid]=$cpucnt
		

		# 
		memsize[$numaid]="$(echo "$meminfo" | awk '$3 == "MemTotal:" { print $4; }')"
	done

	#
	# Display content
	#
	typeset numaid=0
	for numaid in ${numanodes[@]}; do
		echo "numanode=$numaid cpucount=\"${numacount[$numaid]}\" cpuids=\"${numacpus[$numaid]%,}\" cpumodel=\"${cpumodel:-}\" cpuucode=\"${cpuucode:-}\" cpusmt=\"${numasmt[$numaid]}\" memsize=\"${memsize[$numaid]}\""
	done
}

# -----------------------------------------------------------------------------
# Memory
# -----------------------------------------------------------------------------
function ammHardware::MemoryDetail {
	typeset showEmpty="${1:-false}"

	# Append DMI data if available
	typeset doProcess=0
	typeset -A data=()
	while IFS=: read key val; do
		key="$(ammString::Trim "$key")"
		val="$(ammString::Trim "$val")"

		# Empty row + valid current: print line
		if [[ -z "$key" ]] && [[ "$doProcess" == "1" ]]; then
			if [[ -n "${data[size]:-}" ]] || [[ "$showEmpty" != "false" ]]; then
				echo "slot=\"${data[locator]}\" size=\"${data[size]:-}\" form=\"${data[form]:-}\" rank=\"${data[rank]:-}\"  vendor=\"${data[vendor]:-}\" model=\"${data[model]:-}\" serial=\"${data[serial]:-}\"  "
			fi
			doProcess=0
			data=()
		fi

		# Skip non-memory rows
		[[ "$key" == "Memory Device" ]] && doProcess=1
		[[ "$doProcess" != "1" ]] && continue

		# Don't set dummy values
		if [[ "$val" == "Unknown" ]] || [[ "$val" == "No Module Installed" ]] || [[ "$val" == "Not Specified" ]]; then
			continue
		fi

		case "$key" in
			Size)          data[size]="$val" ;;
			Form\ Factor)  data[form]="$val" ;;
			Locator)       data[locator]="$val" ;;
			Bank\ Locator) ;;
			Type)          data[type]="$val" ;;
			Type\ Detail)  data[typedetail]="$val" ;;
			Speed)         data[speedmax]="$val" ;;
			Configured\ Memory\ Speed) data[speed]="$val" ;;
			Manufacturer)  data[vendor]="$val" ;;
			Serial\ Number)data[serial]="$val" ;;
			Asset\ Tag) ;;
			Part\ Number)  data[model]="$val" ;;
			Rank)          data[rank]="$val" ;;

		esac
	done < <(ammExec::AsUser root dmidecode -t memory 2>/dev/null)


}

# -----------------------------------------------------------------------------
# Processors
# -----------------------------------------------------------------------------

typeset -gA __AMMHARDWARE_NUMA_TOPO=""
typeset -gA __AMMHARDWARE_CPU_TOPO=""
typeset -gA __AMMHARDWARE_MEM_TOPO=""
typeset -g  __AMMHARDWARE_SYS_CPU="/sys/devices/system/cpu"
function ammHardware::CpuTopologyDiscover {

	# Scan /sys/devices/system/nodes/node*/cpulist
	typeset numaid numapath
	for numapath in /sys/devices/system/node/node[0-9]*/cpulist; do
		numaid="${numapath%/*}"
		numaid="${numaid##*/node}"
		
	done

	# scan /sys/devices/system/cpu*

}

# @description  Returns the siblings (SMT) of a given processor
function ammHardware::CpuSiblings {
	typeset cpuid="$1"

	# Init check
	[[ -n "$__AMMHARDWARE_CPU_TOPO" ]] || ammHardware::CpuTopologyDiscover

}

function ammHardware::CpuNumaGet {
	
	# Init check
	[[ -n "$__AMMHARDWARE_CPU_TOPO" ]] || ammHardware::CpuTopologyDiscover
}

function ammHardware::CpuFrequencyGetDriver {
	typeset src="$__AMMHARDWARE_SYS_CPU/cpu0/cpufreq/scaling_driver"
	if [[ -e "$src" ]]; then
		echo $(< "$src")
	else
		echo "none"
	fi
	return 0
}

function ammHardware::CpuFrequencyGetGovernor {
	:
}

function ammHardware::CpuFrequencyGetCurrent {
	:
}

# @description  List all available frequencies
# @arg $1  (string) Type of frequencies: supported by CPU (hard) or by governor (soft)
function ammHardware::CpuFrequencyGetAvailable {
	typeset typ="${1:-soft}"
	
	typeset filepfx=""
	if [[ "$typ" == "hard" ]]; then
		filepfx="cpuinfo"
	elif [[ "$typ" == "soft" ]]; then
		filepfx="scaling"
	else
		ammLog::Error "Unknown type of frequency: $typ. Must be 'hard' or 'soft'"
		return 1
	fi

	typeset sys="$__AMMHARDWARE_SYS_CPU/cpu0/cpufreq"

	# Try to use provided avilable frequencies (if available)
	typeset avail="$sys/${filepfx}_available_frequencies"
	if [[ -s "$avail" ]] && [[ -r "$avail" ]]; then
		$(<$avail)
		return 0
	fi

	# Assert frequencies ourselves (assume 100MHz step)
	typeset -i fmin="$(< $sys/${filepfx}_min_freq)" fmax="$(< $sys/${filepfx}_max_freq)"
	case $(ammHardware::CpuFrequencyGetDriver) in
		intel_pstate)
			# Assume 100MHz step
			typeset -i step=100000 i=0
			for (( i=$fmin; i<=$fmax; i+=$step )); do
				echo -n "$i "
			done
			;;
		acpi-cpufreq)
			# Should have been provided by available_frequencies. cpupower should provide more
			typeset cpout="$(ammExec::AsUser "root" cpupower frequency-info)"
			if [[ -n "$cpout" ]]; then
				#echo "$cpout" | grep
				:

			fi
			
			;;
		*)
			echo "$fmin" "$fmax"
			;;
	esac
}

function ammHardware::CpuFrequencyGetBasefreq {

	typeset syscpu0="$__AMMHARDWARE_SYS_CPU/cpu0"
	# CPUFreq handling
	if [[ -d "$syscpu0/cpufreq" ]]; then
		# try multiple sources depending on cpu vendor
		typeset src
		for src in base_frequency bios_limit; do
			typeset cpusrc="$syscpu0/cpufreq/$src"
			[[ -r "$cpusrc" ]] && echo $(< "$cpusrc") && return 0
		done
	fi

	# No CPUFreq: cpuinfo parsing
	typeset f= fprev=
	for f in $(ammString::Filter "/proc/cpuinfo" "cpu MHz" "[0-9]" "4"); do
		# Remove the . to have freq in KHz, used by cpufreq
		f=${f//./}
		if [[ -n "$fprev" ]] && [[ "$fprev" != "$f" ]]; then
			ammLog::Warning "Different frequencies found in cpuinfo: '$f' != '$fprev'"
		fi
		fprev=$f
	done
	echo "$f"
}


function ammHardware::CpuFrequencyReset {
	#
	typeset -a flist=($(ammHardware::CpuFrequencyGetAvailable "hard"))
	typeset fmin=${flist[0]}
	typeset fmax=${flist[-1]}
	ammHardware::CpuFrequencySet "$fmin" "$fmax"
}

function ammHardware::CpuFrequencySet {
	typeset fmin="$1"
	typeset fmax="${2:-$fmin}"

	if ! ammExec::AsUser "root" cpupower frequency-set --min $fmin --max $fmax; then
		ammLog::Error "Unable to set frequency to min/max: $fmin/$fmax"
		return 1
	fi
	return 0
}
