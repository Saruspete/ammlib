# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammHttp::MetaCheck {
	ammExec::RequireOne curl wget
}

function ammHttp::MetaInit {
	ammLib::Load "string"

	typeset -g  _AMMHTTP_CURL_VERSION=
	if ammExec::Exists "curl"; then
		_AMMHTTP_CURL_VERSION="$(\curl -V|ammString::Filter - '^curl' '' 2)"
		ammLog::Debug "Found curl version '$_AMMHTTP_CURL_VERSION'"
	fi

	typeset -g  _AMMHTTP_WGET_VERSION=
	if ammExec::Exists "wget"; then
		_AMMHTTP_WGET_VERSION="$(\wget -V|ammString::Filter - '^GNU Wget' '' 3)"
		ammLog::Debug "Found wget version '$_AMMHTTP_WGET_VERSION'"
	fi

	# Reset agent override
	typeset -g _AMMHTTP_AGENT_FORCE=
}




# -----------------------------------------------------------------------------
# Internal wrappers for tools
# -----------------------------------------------------------------------------

function ammHttp::_DoQuery {
	typeset opts="$1"

	# User-specified agent, forcefully
	if [[ -n "${_AMMHTTP_AGENT_FORCE:-}" ]]; then
		# TODO: warning: executing a user-provided variable. Might be security risk
		if ammEnv::IsFunc "$_AMMHTTP_AGENT_FORCE" || ammExec::Exists "$_AMMHTTP_AGENT_FORCE"; then
			$_AMMHTTP_AGENT_FORCE "$@"
			return $?
		else
			ammLog::Warning "Invalid value in AMMHTTP_AGENT_FORCE: '$AMMHTTP_AGENT_FORCE'"
		fi
	fi

	# Last, use first available
	if [[ -n "${_AMMHTTP_CURL_VERSION:-}" ]]; then
		ammHttp::_DoCurl "$@"
		return $?
	elif [[ -n "${_AMMHTTP_WGET_VERSION}" ]]; then
		ammHttp::_DoWget "$@"
		return $?
	else
		ammLog::Error "Unable to select the target agent..."
		return 1
	fi
}


# @description  Parse incoming options and remove
function ammHttp::_OptParse {

	typeset opt
	for opt in "$@"; do
		[[ "${opt:0:1}" == "-" ]] && continue
		echo "$opt"
	done
}

function ammHttp::_DoCurl {
	typeset opts="${1:-}"
	shift 1

	typeset path="${1%%\?*}"
	typeset data="${1#*\?}"
	typeset request="GET"
	
	# Modifiers:
	# @  read from file given after @  (act like file upload)  avatar@file.jpg
	# <  read from file given after <  (act like text field)   mytext<longstory.txt
	# ;  set custom parameters of file: avatar@file.jpg;filename=rick.jpg
	#    Can be: filename, type, headers. Eg:  myupload
	# -  read from stdin
	# .  Same as - but unbuffered for streaming

	# --data(all)   application/x-www-form-urlencoded   (for form post)
	# --form(all)   multipart/form-data                 (for file upload)

	# --data
	# --data-ascii   like --data
	# --data-raw     like --data but without interpretation of @
	# --data-binary  no special char processing
	# --data-urlencode urlencode data
	# --form         
	# --form-string  no special char processing


	# Options parsing
	typeset -i ret=0
	# Fail silently (do not show custom 5xx or 4xx error body message)
	typeset -a curlopts=("--fail")
	typeset -A tmpdata
	typeset opt= cwd=
	for opt in $(ammHttp::_OptParse ${opts:-}); do
		typeset val="${opt#*=}"
		case $opt in
			# HEAD
			head)        request="HEAD"
			             curlopts+=("--head") ;;
			# PUT
			put)         request="PUT"  ;;
			put-file=*)  request="PUT"
			             curlopts+=("--upload-file '$val'");;
			put-form=*)  request="PUT"
			             curlopts+=("--form '$val'") ;;
			# POST
			post)        request="POST" ;;
			post-file=*) request="POST"
			             typeset formName="${val%%=*}" formFile="${val#*=}"
			             [[ "$formName" == "$val" ]] && formName="${val##*/}"
			             curlopts+=("--form" "$formName=@$formFile") ;;
			post-form=*) request="POST"
			             curlopts+=("--data" "$val") ;;
			# Security
			cert-cafile=*)curlopts+=("--cacert" "$val") ;;
			cert-cadir=*) curlopts+=("--capath" "$val") ;;
			cert-client=*)curlopts+=("--cert"   "$val") ;;
			cert-crl=*)   curlopts+=("--crlfile" "$val") ;;

			# Query modifiers
			json)        curlopts+=("--header" "Content-Type: application/x-www-form-urlencoded") ;;
			follow)      curlopts+=("--location") ;;
			nofollow)    curlopts=("${curlopts[@]/--location/}")
			             curlopts=("${curlopts[@]/-L/}") ;;
			header=*)    curlopts+=("--header" "$val") ;;
			agent=*)     curlopts+=("--user-agent" "$val") ;;

			# Local modifiers
			silent)      curlopts+=("--silent" "--show-error") ;;
			dest=*)      curlopts+=("--output" "$val" "--create-dirs") ;;
			verbose)     curlopts+=("--verbose") ;;
			# Have to implement it with shell, as --output-dir is not always available
			destdir=*)   ! [[ -d "$val" ]] && mkdir -p "$val"
			             cwd="$val"
			             curlopts+=("--remote-name") ;;
			cookiejar=*) curlopts+=("--cookie-jar" "$val") ;;
			cookieload=*)curlopts+=("--cookie" "$val") ;;

			# Set as tmp to gather under --user
			auth-user=*) tmpdata[auth-user]="$val" ;;
			auth-pass=*) tmpdata[auth-pass]="$val" ;;

			# curl specific options
			parallel)    curlopts+=" -Z" ;;
			*)
				ammLog::Error "Unknown option: '$opt'"
				ret+=1
				;;
		esac
	done

	# Process transcient data
	if (set +u; [[ -n "${tmpdata[auth-user]}" ]] ); then
		curlopts+=("--user" "${tmpdata[auth-user]}:${tmpdata[auth-pass]}")
	fi


	if [[ $ret -gt 0 ]]; then
		ammLog::Error "Cannot execute curl with unhandled parameters"
		return $ret
	fi

	# Do the query for every url provided
	ammLog::Debug "Calling curl as: curl --request '$request' ${curlopts[@]} --connect-timeout 10 '$@'"
	(
		# cwd is required for destdir
		[[ -n "$cwd" ]] && cd "$cwd"
		\curl --request "$request" "${curlopts[@]}" --connect-timeout 10 "$@" 2>/dev/null
	)
	ret+=$?
	ammLog::Debug "Return curl: $ret"

	return $ret
}

function ammHttp::_DoWget {
	typeset opts="${1:-}"
	shift 1

	# Options parsing
	typeset -i ret=0 formCnt=0
	typeset -a wgetopts=("--quiet" "--output-document" "-")
	typeset opt=
	for opt in $(ammHttp::_OptParse ${opts:-}); do
		typeset val="${opt#*=}"
		case $opt in
			# HEAD
			head)        wgetopts+=("--spider") ;;
			# POST
			post-form=*) wgetopts+=("--post-data" "$val") ;;
			# wget can't post binary data (multipart), we must convert it beforehand
			post-file=*)
				ammLog::Warning "uploading binary data using wget. This is inefficient and triple traffic size"
				typeset formName="${val%%=*}" formFile="${val#*=}"
				[[ "$formName" == "$val" ]] && formName="${val##*/}"

				# translate to url encoding
				typeset tmpUpload="$(ammLib::TmpPathGet)/wget.post.$$.$formCnt"
				echo -n "$formName=" >| "$tmpUpload"
				cat "$formFile" | ammString::UrlEncode >> "$tmpUpload"
				wgetopts+=("--post-file" "$tmpUpload")
				formCnt+=1
				;;
			# Security

			# Query modifiers
			follow) ;;
			nofollow)    wgetopts+=("--max-redirect=0") ;;
			header=*)    wgetopts+=("--header" "$val") ;;
			agent=*)     wgetopts+=("--user-agent" "$val") ;;

			# Local modifiers
			#to-stdout)   wgetopts=
			silent)      wgetopts+=("--quiet") ;;
			dest=*)      wgetopts+=("--output-document" "$val") ;;
			destdir=*)   wgetopts+=("--directory-prefix" "$val")  ;;
			cookiejar=*) wgetopts+=("--load-cookies" "$val" "--save-cookies" "$val" "--keep-session-cookies") ;;
			cookieload=*)wgetopts+=("--load-cookies" "$val") ;;

			# auth
			auth-user=*) wgetopts+=("--user" "$val") ;;
			auth-pass=*) wgetopts+=("--password" "$val") ;;

			# wget specific options
			recursive)   wgetopts+=("--recursive" "--no-parent" "--execute" "robots=off" "--wait" "0.1") ;;
			*)
				ammLog::Error "Unhandled fetch_http option for wget: $opt"
				ret+=1
				;;
		esac
	done

	if [[ $ret -gt 0 ]]; then
		ammLog::Error "Cannot execute wget with unhandled parameters"
		return $ret
	fi

	# Do the query for every url provided
	ammLog::Debug "Calling wget as: wget ${wgetopts[@]} --no-clobber '$@'"
	\wget "${wgetopts[@]}" --no-clobber "$@" 2>/dev/null
	ret=$?


	return $ret
}

# -----------------------------------------------------------------------------
# Generic HTTP features
# -----------------------------------------------------------------------------

# @description  Do a single HTTP GET request
function ammHttp::Get {
	typeset url="$1"
	typeset opts="${2:-follow}"

	ammHttp::_DoQuery "$opts" "$url"

}

function ammHttp::Post {
	typeset url="$1"
	typeset data="$2"
	typeset opts="${3:-follow}"

	# Maybe should be ammString::UrlEncode
	data="${data// /%20}"

	# File upload ?
	if [[ -s "$data" ]]; then
		opts+=" post-file=$data"

	# JSON ?
	elif [[ "${data:0:1}" == "{" ]]; then
		opts+=" post-form=$data json"
	
	# Simple form
	else
		opts+=" post-form=$data"
	fi

	ammHttp::_DoQuery "$opts" "$url"
}

# @description  Fetch an url
# @arg $1 (url)  URL to retrieve file from
# @arg $2 (path)  Directory
# @arg $3 (string) Options to change function behavir. Default: "follow silent"
#   follow: Follow redirections
#   nofollow: Don't follow redirections
#   silent: Don't show messages, only errors
function ammHttp::Fetch {
	typeset src="$1"
	typeset dst="$2"
	typeset opts="${3:-follow}"

	typeset -i r=0
	[[ "$dst" != "-" ]] && opts+=" silent"

	# Remove protocol
	typeset cacheName="${src#*://}"

	# Transform param in sha256 in case of secret credentials
	typeset cacheParam="${cacheName#*\?}"
	if [[ "$cacheParam" != "$cacheName" ]]; then
		cacheParam="$(ammString::HashSHA256 "$cacheParam")"
		cacheName="${cacheName##\?*}?$cacheParam"
	fi

	# Check if cache is available
	if [[ -n "${AMMHTTP_FETCH_CACHE:-}" ]]; then
		typeset cachePath="$AMMHTTP_FETCH_CACHE/$cacheName"
		ammLog::Debug "Checking if cache is present under '$cachePath'"
		if [[ -s "$cachePath" ]]; then
			if [[ "$dst" == "-" ]]; then
				cat "$cachePath"
				return $?
			else
				cp "$cachePath" "$dst"
				return $?
			fi
		fi
	fi

	# if dest is a directory or ends with /, change option accordingly
	typeset dstOpt="dest"
	if [[ -d "$dst" ]] || [[ "${dst: -1:1}" == "/" ]]; then
		dstOpt="destdir"
	fi
	ammHttp::Get "$src" "$opts ${dstOpt}=$dst"
	r=$?

	ammLog::Trace "ammHttp::Get returned $r"

	# Do the caching if requested and fetch success
	if [[ $r == 0 ]] && [[ -n "${AMMHTTP_FETCH_CACHE:-}" ]]; then
		typeset cachePath="$AMMHTTP_FETCH_CACHE/$cacheName"
		ammLog::Debug "Storing '$src' as cache '$cachePath'"
		mkdir -p "${cachePath%/*}"
		cp "$dst" "$cachePath"
	fi

	ammLog::Debug "return r=$r"
	return $r
}

function ammHttp::FetchSmart {
	typeset src="$1"
	typeset dst="${2:-$__AMMLIB_DATATMP/${src##*/}}"
	typeset opt="${3:-}"

	typeset -i ret=0

	ammLog::Debug "Trying to fetch smart src='$src' dst='$dst' opt='$opt'"

	# git: URL ends with .git  or start as git://
	if [[ $src =~ ^git:// ]] || [[ $src =~ .+\.git$ ]]; then
		if is_binary "git"; then
			(
				mkdir -p "$dst"
				cd "$dst"
				git clone "$src" .
			)
			ret=$?
		else
			ammLog::Error "Cannot find git"
			ret=99
		fi

	# scp: host:path
	elif [[ $src =~ ^[a-zA-Z0-9_\-\.]+:.+$ ]]; then
		ammLog::Warning "scp not yet implemented"
		ret=99

	# RSYNC
	elif [[ $src =~ ^rsync:// ]]; then
		if ammExec::Exists "rsync"; then
			rsync -a "$src" "$dst"
			ret=$?
		else
			ammLog::Error "Cannot find rsync"
			ret=99
		fi

	# HTTP: curl or wget
	elif [[ $src =~ ^https?:// ]]; then

		ammHttp::Fetch "$src" "$dst" "$opt"
		ret=$?

	# Local file: "./"
	elif [[ -e "$(readlink -f $src)" ]]; then
		ammLog::Info "Fetching '$src' with cp"
		cp -r "$src" "$dst"
		ret=$?
	else
		ammLog::Error "Unable to process url '$src'"
		ret=99
	fi

	echo "$dst"
	ammLog::Debug "Finished fetch. ret=$ret"
	return $ret
}

# @description  Push a given file to a specified url
function ammHttp::Push {
	typeset url="$1"
	typeset file="$2"
	typeset opts="${3:-}"

	ammHttp::_DoQuery "post-file=$file $opts" "$url"
}


# -----------------------------------------------------------------------------
# Special sites (to be split into submodule ?
# -----------------------------------------------------------------------------

# TODO: use tools like jq to parse json APIs and use private keys

#
# Github
#

function ammHttp::GithubBranchGetLastCommit {
	typeset projectpath="$1"
	typeset branch="${2:-master}"

	# Get the atom feed, and grep the related tag...
	typeset url="https://github.com/$projectpath/commits/${branch}.atom"
	typeset out="$(ammHttp::Get "$url" "-")"

	# Try again with "main" branch if default
	if [[ "$out" == "Not Found" ]] && [[ -z "${2:-}" ]]; then
		branch="main"
		url="https://github.com/$projectpath/commits/${branch}.atom"
		out="$(ammHttp::Get "$url" "-")"
	fi

	typeset commitid="${out#*<id>tag:github.com,2008:Grit::Commit/}"
	commitid="${commitid%%</id>*}"
	typeset commitdate="${out#*<updated>}"
	commitdate="${commitdate%%</updated>*}"

	echo "$commitdate $commitid"
	[[ -n "$commitdate" ]]
}

function ammHttp::GithubCommitExists {
	typeset projectpath="$1"
	typeset commit="$2"

	typeset url="https://github.com/$projectpath/commit/$commit"
	[[ "$(ammHttp::Get "$url" "-" 2>/dev/null)" != "Not Found" ]]
}

function ammHttp::GithubArchiveGetUrl {
	typeset projectpath="$1"
	typeset commit="$2"

	typeset url="https://github.com/$projectpath/archive/$commit.tar.gz"
	echo "$url"
}

# @description  List all available releases
# @arg  $1 (string) project path, in format "username/reponame"
# @arg  $2 (bool) show also pre-releases
# @stdout   one result per line:  tag  publicationTS  name
function ammHttp::GithubReleaseList {
	typeset projectpath="$1"
	typeset showrc="${2:-false}"

	# Go through the API to have more than 10 releases. More than 100 needs paging (&page=X)
	typeset url="https://api.github.com/repos/$projectpath/releases?per_page=100"
	typeset -i cnt=0

	# If jq is available, use it
	if ammExec::Exists "jq"; then
		typeset tag prerelease date name
		while read tag prerelease date name; do
			# remove string interp from jq
			tag="${tag#\"}" ; name="${name%\"}"
			# skip pre-releases
			[[ "$prerelease" == "true" ]] && [[ "$showrc" == "false" ]] && continue
			date="$(date -d "$date" +%s)"
			echo "$tag $date $name"
			cnt+=1
		done < <(ammHttp::Get "$url" "-" | jq '.[] | "\(.tag_name) \(.prerelease) \(.published_at) \(.name)"')
	# fallback to awk (more risky to output updates)
	else
		typeset tag prerelease date name
		while read tag prerelease date name; do
			[[ "$prerelease" == "true" ]] && [[ "$showrc" == "false" ]] && continue
			date="$(date -d "$date" +%s)"
			echo "$tag $date $name"
			cnt+=1
		done < <(ammHttp::Get "$url" "-" | awk '
			$1 == "\"tag_name\":"   { gsub(/[,"]/,"",$2); tag=$2; }
			$1 == "\"prerelease\":" { gsub(/[,"]/,"",$2); prerelease=$2; }
			$0 ~ /^    "name":/     { gsub(/[,"]/,"",$2); name=$2; }
			$0 ~ /^    "published_at":/ { gsub(/[,"]/,"",$2); date=$2; }
			$0 ~ /^  },$/ {
				print tag,prerelease,date,name
				tag=prerelease=date=name="\"\""
			}
		')
	fi

	[[ "$cnt" -gt 0 ]]
}

function ammHttp::GithubReleaseGetLastVersion {
	ammLog::Deprecated "ammHttp::GithubReleaseGetLatest" "$@"
}

function ammHttp::GithubReleaseGetLatest {
	typeset projectpath="$1"
	typeset tag="${2:-latest}"

	# Try with the simple http
	typeset url="https://github.com/$projectpath/releases/$tag"
	typeset out="$(ammHttp::Get "$url" "-" "nofollow")"
	# curl will output the html with new location href
	# wget will show the redirect url
	typeset vers="$(echo "$out"| grep -Po 'releases/tag/.+[" ]' | cut -d/ -f 3 | tr -d '"')"

	# If a version was tagged latest, use it and stop
	if [[ -n "$vers" ]]; then
		echo "$vers"
		return 0
	fi

	# If latest tag is not set, fetch the latest release

	# Test from atom feed
	url="https://github.com/$projectpath/releases.atom"
	out="$(ammHttp::Get "$url" "-")"
	typeset vers="${out#*<id>tag:github.com,2008:Repository/*/}"
	if [[ "$vers" != "$out" ]]; then
		vers="${vers%%</id*}"
		echo "$vers"
		return 0
	fi

	# Else, test with api
	url="https://api.github.com/repos/$projectpath/releases"
	out="$(ammHttp::Get "$url" "-")"
	if ammExec::Exists jq; then
		vers="$(echo "$out" | jq '.[0].tag_name')"
		vers="${vers//\"/}"
		echo "$vers"
		return 0
	else
		vers="$(echo "$out" | awk '$1=="\"tag_name\":" {gsub(/[,"]/,"",$NF); print $NF; exit}')"
		echo "$vers"
		return 0
	fi

	return 1
}

function ammHttp::GithubReleaseGetAssets {
	typeset projectpath="$1"
	typeset tag="$2"
	typeset assetfilter="${3:-}"

	typeset url="https://api.github.com/repos/$projectpath/releases/tags/$tag"
	typeset out="$(ammHttp::Get "$url" "-")"
	typeset urls=""

	#
	if ammExec::Exists "jq"; then
		urls="$(echo "$out" | jq '.assets[].browser_download_url')"
		urls="${urls//\"/}"
	else
		urls="$(echo "$out" | awk '$1=="\"browser_download_url\":" {print $2}')"
		urls="${urls//\"/}"
	fi

	echo "$urls"
	[[ -n "$urls" ]]
}

# Compat
function ammHttp::GithubBranchGet {
	ammLog::Deprecated "ammHttp::GithubBranchGetLastCommit" "$@"
}
function ammHttp::GithubReleaseGet {
	ammLog::Deprecated "ammHttp::GithubReleaseGetLastVersion" "$@"
}


#
# cgit
#
function ammHttp::CGitTagGet {
	typeset urlrepo="$1"

	typeset url="$urlrepo/refs/tags"

	typeset line
	while read line; do
		ammLog::Debug "Testing line '$line'"
		if [[ $line =~ /.+/tag/\?h=([-_\.0-9a-zA-Z]+)\'\> ]]; then
			echo "${BASH_REMATCH[1]}"
		fi
	done < <(ammHttp::Get "$url" "-")


}
