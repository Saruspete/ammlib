# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

typeset -gA __AMMPKG_PATHTOTYPE

function ammPkg::MetaCheck {
	ammLib::Require string
	ammExec::Require ldd
}

function ammPkg::MetaInit {

	# Try to load the local package manager to avoid redundancy
	typeset localpkgmgr="$(ammPkg::ManagerDetect)"
	if [[ -n "$localpkgmgr" ]]; then
		ammLib::Load "pkg.$localpkgmgr" && __AMMPKG_PATHTOTYPE[/]="$localpkgmgr"
	fi


	return 0
}

# Interesting links for sub-modules:
# https://www.linuxtricks.fr/wiki/rosetta-tableau-comparatif-des-outils-urpm-yum-zypper-emerge-et-apt
# https://wiki.archlinux.org/index.php/Pacman/Rosetta


# -----------------------------------------------------------------------------
# Sub-libraries managment
# -----------------------------------------------------------------------------


# @description Detect the package manager for a given path
#
# @arg $1 the path to search for related package manager
#
# @stdout  The package manager library name (without "pkg." prefix). ex: "yum"
function ammPkg::ManagerDetect {
	typeset rootpath="${1:-/}"

	# Portage: Gentoo
	if [[ -s "$rootpath/var/lib/portage/world" ]]; then
		echo "portage";

	# RPM: Redhat, Centos, Mandriva
	elif [[ -s "$rootpath/var/lib/yum/uuid" ]]; then
		echo "yum"
	elif [[ -d "$rootpath/var/lib/dnf" ]]; then
		#echo "dnf"
		echo "yum"
	elif [[ -s "$rootpath/var/lib/rpm/Packages" ]]; then
		echo "rpm";

	# apt: Debian, Ubuntu
	elif [[ -d "$rootpath/var/lib/apt" ]]; then
		echo "apt"

	# No quick way to find, try with loading all libs
	else
		typeset -a mgr
		typeset sublib
		for sublib in $(ammLib::LocatePattern "pkg.*"); do
			ammLog::Debug "Found sublib '$sublib'"
			if ammLib::Loadable "$sublib" >/dev/null; then
				ammLib::Load "$sublib"

				typeset libtype="${sublib#*/pkg.}"
				libtype="${libtype%.lib}"

				# If the package manager is ok, good
				typeset funcName="ammPkg${libtype^}::IsAvailable"
				if ammEnv::IsFunc "$funcName" && $funcName "$rootpath"; then
					mgr+=("$libtype")
				fi
			fi
		done

		if [[ -z "${mgr:-}" ]]; then
			ammLog::Error "Unhandled or inexistant package manager on '$rootpath'"
			return 1
		elif [[ ${#mgr[@]} -eq 1 ]]; then
			echo $mgr
			return 0
		elif [[ ${#mgr[@]} -gt 1 ]]; then
			#$AMMLIB_INTERACTIVE &&
			ammLog::Warning "Multiple package managers available: '${mgr[@]}'"
			return 1
		else
			ammLog::Error "Unhandled case: mgr='${mgr[@]}'"
			return 1
		fi
	fi

	return 0
}

# @description (private) dispatch generic pkg call to selected submodule
#
# @arg $1  (string) function name to call
# @arg $2  (path)(optionnal)
# @arg $@  (any) argument to pass to the selected function
function ammPkg::_Proxy {
	typeset func="$1"; shift

	typeset path="/"
	# Some functions like "Extract" need a path.
	# TODO: make it smarter, like test if the path is a valid chroot or smth like this
	if [[ -n "${1:-}" ]] && [[ -d "$1/var" ]] && [[ "$func" != "Extract" ]]; then
		path="$1"
		shift
	fi

	# Use the mapping if available
	if ( set +u; [[ -n ${__AMMPKG_PATHTOTYPE[$path]} ]] ); then
		lib="${__AMMPKG_PATHTOTYPE[$path]}"

	# Else, create and populate it
	else
		lib="$(ammPkg::ManagerDetect "$path")"
		if [[ -n "$lib" ]]; then
			__AMMPKG_PATHTOTYPE[$path]="$lib"
		fi
	fi

	# Check we found a managed
	if [[ -z "$lib" ]]; then
		ammLog::Error "Unable to find the manager library to use for path '$path'"
		return 1
	fi

	# Load the target library
	if ! ammLib::Load "pkg.$lib"; then
		ammLog::Error "Unable to load package manager '$lib' for path '$path'. This should be reported !"
		return 1
	fi

	# Call the target function
	ammPkg${lib^}::${func} "$@"
}

# -----------------------------------------------------------------------------
# Main package manager operations
# -----------------------------------------------------------------------------

function ammPkg::Install {
	ammPkg::_Proxy "Install" "$@"
}

function ammPkg::Remove {
	ammPkg::_Proxy "Remove" "$@"
}

# @description Check if a given package is installed
# @arg $@  (string) Package or string to be checked against
# @stdout  List of given string and the matching packages
function ammPkg::Installed {
	ammPkg::_Proxy "Installed" "$@"
}


# Terminology
#
# from file, get pkg providing it: OwnerOf, WhatProvides, BelongsTo
# from file, get siblings:         SiblingsOf, 
# from pkg,  get dependencies:     RequirementsOf, WhatRequires, WhatNeeds
# from pkg,  get what need it:     ListPkgNeeding, NeededBy, WhatPulls, WhatRequires, WhatNeeds, what is needing
# from pkg,  get files provided:   ListContent, WhatProvides
#
#


# What files or requirements does a pkg need
function ammPkg::InfoRequirements {
	ammPkg::_Proxy "InfoRequirements" "$@"
}

# @description  List packages that provides a specified file or feature
# @arg $@  (string) Path or glob of a searched file
function ammPkg::InfoWhatProvides {
	ammPkg::_Proxy "InfoWhatProvides" "$@"
}

# @description  List packages that provides a specified file
function ammPkg::InfoWhatProvidesFile {
	ammPkg::_Proxy "InfoWhatProvidesFile" "$@"
}


# @description  Install packages that provides specified file
function ammPkg::InstallWhatProvides {

	# Order of preference when multiple packages match a given file. Prefer binaries and include files
	typeset -a preferences=(/usr/sbin /usr/bin /sbin /bin /usr/libexec /usr/include /opt /usr /var /)
	typeset -a pkgs
	typeset -i r=0
	typeset file
	for file in "$@"; do
		typeset pkg vers file
		typeset -A provides

		# If it's an absolute path, fast-skip
		if [[ "${file:0:1}" == "/" ]] && [[ -e "$file" ]]; then
			ammLog::Debug "Skipping already installed absolute path '$file'"
			continue
		fi

		# List all provided packages
		while read pkg vers file; do
			provides[$file]="$pkg"
		done < <(ammPkg::InfoWhatProvides "$file")

		# check all reported packages
		case "${#provides[@]}" in
			# None found...
			0)
				ammLog::Warning "Unable to find package providing '$file'"
				r+=1
				;;
			# Only 1 pkg, use it directly
			1)
				pkgs+=("${provides[@]}")
				;;
			# We need to select one
			*)
				typeset pref selected=""
				# Check our preferences in order
				for pref in "${preferences[@]}"; do
					ammLog::Debug "Checking for a file in '$pref'"
					for pkgfile in "${!provides[@]}"; do
						typeset pkg="${provides[$pkgfile]}"
						# If the file starts with our current prefix, select it
						if [[ "${pkgfile#$pref}" != "$pkgfile" ]]; then
							ammLog::Debug "Selecting '$pkg' providing file '$pkgfile' from preference '$pref'"
							selected="$pkg"
							break 2
						fi
					done
				done
				if [[ -n "$selected" ]]; then
					pkgs+=("$selected")
				else
					ammLog::Warning "No package selected from list '${provides[@]}. Very strange..."
					r+=1
				fi
				;;
		esac
	done

	# Do installation for pkgs
	if (set +u; [[ "${#pkgs[@]}" -gt 0 ]] ); then
		ammPkg::Install "${pkgs[@]}"
	else
		ammLog::Warning "No package to install"
	fi
	r+=$?

	return $r
}

# -----------------------------------------------------------------------------
# Less used package manager operations
# -----------------------------------------------------------------------------

function ammPkg::Fix {
	ammPkg::_Proxy "Fix" "$@"
}

function ammPkg::Extract {
	ammPkg::_Proxy "Extract" "$@"
}

# -----------------------------------------------------------------------------
# Generic fetcher
# -----------------------------------------------------------------------------



# @description Smart extractor for a package, binary or feature and its dependencies
#
# @Ã¦rg $1 string Destination path for extraction.
# @arg $@ string List of packages, binaries or urls to extract, with their dependencies
function ammPkg::FindDeps {

	typeset    pkgsToDl
	typeset -A pkgFiles
	typeset tmpdir="$__AMMLIB_DATATMP/ammPkg::/extract"
	mkdir -p "$tmpdir"


	# For each provided element, we'll guess its type, action and extract it
	typeset element
	for element in "$@"; do
		typeset type="$(ammString::Type "$element")"
		ammLog::Debug "Processing element '$element' (type: $type)"

		#
		# URI: Download the file locally for further analysis
		#
		if [[ "$type" == "uri" ]]; then
			if ! ammLib::Load http >/dev/null; then
				ammLog::Error "Cannot load required library http to process uri '$element'. Skipping"
				continue
			fi

			typeset destfile="$tmpdir/${elements##*/}"

			# Download the uri
			if ! ammHttp::FetchSmart "$element" "$destfile"; then
				ammLog::Error "Unable to fetch uri '$element' as '$destfile'"
				continue
			fi

			#pkgFiles+="$destfile "

			# Override the just downloaded file
			if [[ -e "$destfile" ]]; then
				type="file"
				element="$destfile"
			fi
		fi

		#
		# file: check format
		#
		if [[ "$type" == "file" ]]; then

			typeset epkg="$(ammPkg::InfoWhatProvides "$element")"

			# File belongs to a package
			if [[ -n "$epkg" ]]; then
				pkgsToDl+="$epkg "

			# Not part of a package. Just copy it
			else
				typeset realelem="$(readlink -f $element)"
				typeset copydest="$dest/$realelem"
				[[ -d "${copydest%/*}" ]] || mkdir -p "${copydest%/*}"
				rsync -avX "$element" "$copydest"

				# TODO: handle the case where $element != realelem (symlinked)
			fi

			# For now, assume a binary. Else, just skip (may comment following test)
			if head -n 1 "$element" | grep ELF >/dev/null 2>&1; then

				# Require the fileformat Elf module
				if ! ammLib::Load "fileformat.elf"; then
					ammLog::Error "Cannot load library 'fileformat.elf' cannot process ELF file '$element'"
					continue
				fi

				ammLog::Debug "Extracting dependencies from ELF binary '$element'"

				typeset file
				for file in $(ammFileformatElf::DependenciesGet $element 2>/dev/null | sort -u); do
					ammLog::Debug "Searching package for file '$file'"

					# if file is not absolute, we are missing it. Add a refrence to /lib in the path
					if [[ "${file:0:1}" != "/" ]]; then
						file="*lib*/$file"
					fi

					# File already in cache, already found. Skip
					if ( set +u; [[ -n "${pkgFiles[$file]}" ]] ) ; then
						ammLog::Debug "File $file already found its package(s): '${pkgFiles[$file]}'"
						continue

					# Finds from which package the file comes from
					else
						typeset pkg="$(ammPkg::InfoWhatProvides "$file")"
						if [[ -z "$pkg" ]]; then
							ammLog::Warning "Unable to find package providing file '$file'."
							continue
						fi

						# Check output for multiple packages
						[[ "${pkg// /}" != "$pkg" ]] && ammLog::Warning "Multiple packages found providing file '$file': $pkg"

						pkgFiles[$file]="$pkg"
						pkgsToDl+="$pkg "
					fi
				done

			# not a binary... just find its owner and add it
			else

				# Find the owner
				typeset pkg="$(ammPkg::InfoWhatProvides "$element")"
				if [[ -z "$pkg" ]]; then
					ammLog::Warning "Unable to find package providing file '$element'."
					continue
				fi

				# And add it
				pkgsToDl+="$pkg "
			fi

		# Should be a package name
		else
			# Just append to packages to download
			pkgsToDl+="$element "

			ammPkg::InfoRequirements "$element"
		fi

	done

	echo "$pkgsToDl"
}

# @description  Extract required dependencies for a package, binary or feature
#
# @args $1 (path)  destination folder where to extract the data
# @args $@ (string) packages or binaries
function ammPkg::ExtractWithDeps {
	typeset dest="$1"; shift

	if ! [[ -d "$dest" ]]; then
		ammLog::Error "Destination '$dest' does not exists. Create it beforehand"
		return 1
	fi

	ammLog::Info "Calling dependency analysis for $@"
	for pkg in $(ammPkg::FindDeps "$@"); do
		ammPkg::Extract "$dest" "$pkg" || ammLog::Warning "Error while extracting '$pkg' to '$dest': ret=$?"
	done
}


