# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

# Some tools are required for this module to work
function ammPkgRpm::MetaCheck {
	ammExec::Require rpm rpm2cpio cpio
}

# -----------------------------------------------------------------------------
# Extract data
# -----------------------------------------------------------------------------

function ammPkgRpm::Extract {
	typeset    dst="$1"; shift
	typeset -i ret=0

	typeset rpmfile
	for rpmfile in "$@"; do
		ammLog::Debug "Extracting package '$rpmfile' into '$dst'"
		# Exec in subshell to avoid changing script cwd
		(
			cd "$dst"
			rpm2cpio "$rpmfile" | cpio -idm 2>/dev/null
		)
		ret+=$?
	done
	return $ret
}

# -----------------------------------------------------------------------------
# Queries
# -----------------------------------------------------------------------------

function ammPkgRpm::_Rpm {

	typeset opts=""
	while [[ -n "${1:-}" ]]; do
		if ammString::IsOption "$1"; then
			opts+=" $1"
			shift

		# Maybe a special case
		else

			# If the arg is a folder, and it has a valid rpmlib db, use it
			if [[ -d "$1" ]] && [[ -s "$1/var/lib/rpm/Packages" ]]; then
				opts+=" --root=$1"
				shift
			else
				break
			fi
		fi
	done

	# Exec the query + opts
	ammLog::Debug "Executing rpm with args: $opts $@"
	# May generate in stderr: "warning: $pkg: Header V3 RSA/SHA256 Signature, key ID XYZXYZ: NOKEY
	rpm $opts "$@"
}

function ammPkgRpm::Install {

	typeset -a commonopts= installopts=
	while [[ -n "${1:-}" ]]; do
		if ammString::IsOption "$1"; then
			commonopts+=("$1")
			shift
		elif [[ -d "$1" ]]; then
			ammLog::Debug "Working in prefix '$1'. Adding '--noscripts'"
			installopts+=("--noscripts")
			commonopts+=("$1")
			shift
		else
			break
		fi
	done

	typeset pkgfile
	for pkgfile in "$@"; do
		typeset pkgname="$(ammPkgRpm::_Rpm "-qp --qf %{NAME}" "$pkgfile")"
		typeset pkgvers="$(ammPkgRpm::_Rpm "-qp --qf %{VERSION}-%{RELEASE}" "$pkgfile")"

		#if ammPkgRpm::Installed
		typeset curvers="$(ammPkgRpm::_Rpm "${commonopts[@]} -qp --qf %{VERSION}-%{RELEASE}" "$pkgname")"

		# If we have a package version mismatch...
		if [[ -n "$curvers" ]] && [[ "$curvers" != "$pkgvers" ]]; then
			ammLog::Info "Changing version of package '$pkgname' from '$curvers' to '$pkgvers'"
		fi
	done

	ammPkgRpm::_Rpm "${commonopts[@]}" "${installopts[@]}" --upgrade --oldpackage "$@"
}


function ammPkgRpm::Installed {
	typeset pkgs="$@"
	typeset -i ret=0

	# Standard chars in package name (- is special and must be last)
	typeset stdchrs="0-9a-zA-Z+_.-" pkg=""
	# If we have special chars, query all then grep
	if ! [[ "${pkgs// /}" =~ ^([$stdchrs]+)$ ]]; then
		typeset specialchrs="${pkgs//[\ $stdchrs]/}"
		typeset allpkgs="$(ammPkgRpm::_Rpm --query --all 2>/dev/null)"

		for pkg in "$@"; do
			typeset pkgtogrep="$pkg"
			# Replace simple globs by their regex equivalent
			if [[ "$specialchrs" == "*" ]]; then
				pkgtogrep="${pkgtogrep//\*/.*}"
				pkgtogrep="${pkgtogrep//\?/.}"
			fi

			echo "$pkg: $(echo "$allpkgs"| grep -P -- "^$pkgtogrep"|tr '\n' ' ')"
		done

	# Standard listing, direct query
	else
		typeset f1 f2 f3
		typeset -A out=()
		ammPkgRpm::_Rpm --query --queryformat "%{NAME}: %{NEVRA}\n" "$@"  2>/dev/null| while read f1 f2 f3; do
			# From output
			if [[ "$f1" == "package" ]] && [[ "$f3" == "is not installed" ]]; then
				echo "$f2:"
				ret+=1
			else
				out[$f1]="${out[$f1]:-} $f2"
			fi
		done

		# Final output (to have one line per package (eg multiple like kernel)
		for f1 in ${!out[@]}; do
			echo "$f1: ${out[$f1]}"
		done
	fi

	return $ret
}

# What does a package requires
function ammPkgRpm::InfoRequirements {

	for file in "$@"; do
		echo -n "$file"
		#ammPkgRpm::_Rpm --query  --queryformat="%{name}.%{arch}\n" --requires "$file"
		ammPkgRpm::_Rpm --query  --queryformat="[%{REQUIRES} ]" --requires "$file"
		echo
	done
}

# What does a package provides
function ammPkgRpm::InfoProvides {
	ammPkgRpm::_Rpm --query --queryformat="%{name}.%{arch}\n" --fileprovide "$@"
}

# What package provides a given element
function ammPkgRpm::InfoWhatProvides {

	typeset element
	for element in "$@"; do
		ammPkgRpm::_Rpm --query  --queryformat="%{name}.%{arch}\n" --file "$element"
	done
}

#
function ammPkgRpm::InfoRequiresToPkg {
	[[ -z "${1:-}" ]] && return 0

	typeset rpmopts=""

	# If the first arg is a folder, and it has a valid rpmlib db, use it
	if [[ -d "$1" ]] && [[ -s "$1/var/lib/rpm/Packages" ]]; then
		rpmopts+=" --root='$1'"
	fi

	# Process all packages
	for pkg in "$@"; do
		ammPkg::InfoRequires $pkg
	done

}

# -----------------------------------------------------------------------------
# RPM DB Helper
# -----------------------------------------------------------------------------
function ammPkgRpm::DbInit {
	typeset prefix="${1:-}"

	# I must add the root exlicitely, as the files checked by _rpm doen't exists yet
	typeset rpmopts=""
	if [[ -n "$prefix" ]]; then
		[[ -d "$prefix" ]] || mkdir -p "$prefix"
		rpmopts+="--root=$prefix"
	fi
	ammPkgRpm::_Rpm $rpmopts --initdb
}

function ammPkgRpm::GpgKeyImport {
	ammPkgRpm::_Rpm --import "$@"
}

function ammPkgRpm::GpgKeyExport {
	ammPkgRpm::_Rpm -q gpg-pubkey --qf '%{NAME}-%{VERSION}-%{RELEASE}\t%{SUMMARY}\n'
}

function ammPkgRpm::GpgKeyRemove {
	typeset prefix="${1:-}"
	
	typeset key
	typeset -a keys
	for key in "$@"; do
		[[ "${key#gpg-pubkey}" == "$key" ]] && key="gpg-pubkey-$key"
		keys+=("$key")
	done
	ammPkgRpm::_Rpm -e "${keys[@]}"
}

function ammPkgRpm::DbExport {
	typeset prefix="${1:-}"
	typeset exportdir="$2"

	for dbfile in $prefix/var/lib/rpm/*; do
		# Skip non BDB files
		[[ "$(file "$dbfile"|awk '{print $2,$3}')" == "BerkeleyDB" ]] || continue

		# Dump the file to target
		ammLog::Info "Dumping '$dbfile' to '$exportdir'"
		/usr/lib/rpm/rpmdb_dump "$dbfile" > "$exportdir/${dbfile##*/}.dmp"
	done
}

function ammPkgRpm::DbImport {
	typeset rpmdb="$1"
	typeset import="$2"


}

function ammPkgRpm::DbRecover {
	typeset prefix="${1:-}"

	# First, try a simple recover
	/usr/lib/rpm/rpmdb_recover
	#rm $prefix/log.0000000001

}

function ammPkgRpm::DbMigrate {
	typeset prefix="${1:-}"


	# List existing rpmdb
	typeset rpmdbs="$(file "$prefix/var/lib/rpm/"* | awk '$2$3 =="BerkeleyDB"{print $1}' | awk -F/ '{print $NF}' | tr -d ':')"

	typeset db
	for db in $rpmdbs; do
		/usr/lib/rpm/rpmdb_dump "$db" > "$db.dump"
	done

	$prefix/usr/lib/rpm/rpmdb_recover
	rm $prefix/log.0000000001

	for db in $rpmdbs; do
		/usr/lib/rpm/rpmdb_load -f /var/lib/rpm/$db.dmp /var/lib/rpm/$db.new
		mv $db.new $db
		rm $db.dump
	done

	$prefix/rpm --rebuilddb
	#$prefix/rpm --import

}


#         typeset rpmdbs="$(file $dest/var/lib/rpm/* | awk '$2$3 =="BerkeleyDB"{print $1}' | awk↪ -F/ '{print $NF}' | tr -d ':')"

#typeset db
#for db in $rpmdbs; do
#    typeset dbsrc="$dest/var/lib/rpm/$db"
#    [[ -e "$dbsrc" ]] || continue
#
#    /usr/lib/rpm/rpmdb_dump "$dbsrc" > "$dbsrc.dmp"
#done
#
#chroot "$dest" /usr/lib/rpm/rpmdb_recover
#rm $dest/log.0000000001
#
#for db in $rpmdbs; do
#    typeset dbsrc="$dest/var/lib/rpm/$db"
#    chroot "$dest" /usr/lib/rpm/rpmdb_load -f /var/lib/rpm/$db.dmp /var/lib/rpm/$db.ne↪w
#    mv $dbsrc.new $dbsrc
#    rm $dbsrc.dmp
#done
#
## prepare the RPM database
#chroot "$dest" rpm --rebuilddb
#chroot "$dest" rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release


# -----------------------------------------------------------------------------
# Static values, helpers...
# -----------------------------------------------------------------------------

