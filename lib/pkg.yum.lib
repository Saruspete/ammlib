# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# Meta init
# -----------------------------------------------------------------------------

#typeset -g AMMPKGYUM_AVAIL_
typeset -gA AMMPKGYUM_REPO_DEFAULTS

# Some tools are required for this module to work
function ammPkgYum::MetaCheck {
	ammLib::Require pkg.rpm string
	ammExec::Require cksum gzip awk
	#ammExec::Require "repoquery"
}
function ammPkgYum::MetaInit {
	ammLib::Require pkg.rpm string


	AMMPKGYUM_REPO_DEFAULTS=(
		[enabled]="1"
		[metadata_expire]="1d"
		[type]="rpm"
		[skip_if_unavailable]="True"
	)
}

function ammPkgYum::IsAvailable {
	typeset rootpath="${1:-}"

	[[ -x "$rootpath/usr/bin/yum" ]]
}

function ammPkgYum::IsDnf {
	typeset rootpath="${1:-}"

	[[ -x "$rootpath/usr/bin/dnf" ]]
}

# -----------------------------------------------------------------------------
# Standard operations
# -----------------------------------------------------------------------------

# @description  (private) proxy for rpm executable
#
# @arg $1  (string) Action for RPM to exec
function ammPkgYum::_Yum {
	typeset act="$1"; shift

	typeset -a opts=("-y")
	#$__AMMLIB_INTERACTIVE || opts+="-y"

	# Check if input contains options
	while [[ -n "${1:-}" ]]; do
		if ammString::IsOption "$1"; then
			opts+=" $1"
			shift
		elif [[ -d "${1:-}" ]] && [[ -d "$1/var/lib/rpm" ]]; then
			opts+=("--installroot=$1" "--setopt=cachedir=$1/var/cache/yum" )
		else
			break
		fi
	done

	ammLog::Debug "Executing yum with args: $act $opts $@"
	if [[ "$act" =~ (.*install|.*remove|erase|clean|update.*|.+grade.*)$ ]] && [[ "$__AMMLIB_USERID" != 0 ]]; then
		ammLog::Info "Trying to execute 'yum $act $opts $@' as root"
		ammExec::AsUser "root" yum --quiet $act $opts "$@"
	else
		# Wrapper to avoid slots being added in package name (eg, openssl-devel-1, make-1)
		if [[ "$act" == "provides" ]] && ammPkgYum::IsDnf; then
			dnf --quiet repoquery --queryformat "%{name}-%{version}.%{release}.%{arch}:\nFilename:" "$@"
		else
			yum --quiet $act $opts "$@"
		fi
	fi
}

function ammPkgYum::_Repoquery {

	ammExec::Exists "repoquery" >/dev/null || return 1

	typeset opts=""

	# Check if input contains options
	while [[ -n "${1:-}" ]]; do
		if ammString::IsOption "$1"; then
			opts+=" $1"
			shift
		else
			break
		fi
	done

	ammLog::Debug "Executing repoquery with args: $opts $@"
	repoquery $opts "$@" 2>/dev/null
}

function ammPkgYum::Install {
	# TODO: Make more checks for "upgrade" or "downgrade" if version provided
	ammPkgYum::_Yum "install" "$@"
}

function ammPkgYum::Remove {
	ammPkgYum::_Yum "remove" "$@"
}

function ammPkgYum::Search {
	ammPkgYum::_Yum "info" "$@"
}

function ammPkgYum::Installed {
	ammPkgRpm::Installed "$@"
}

function ammPkgYum::InfoRequirements {
	ammPkgYum::_Yum "deplist" "$@" | awk '
		$1 == "package:" { printf "\n"$2; delete a; }
		$1 == "provider:" { if (!a[$2]) { printf " "$2; a[$2]=1; } }
	'
}

function ammPkgYum::InfoWhatProvides {

	# Check for all input
	typeset element
	for element in "$@"; do
		# If it's a file already installed, use rpm (faster)
		if [[ -e "$element" ]]; then
			ammPkgRpm::InfoWhatProvides "$element"

		# Else, query all repordata
		else
			# If repoquery is available, use it
			if ammExec::Exists repoquery >/dev/null; then
				ammPkgYum::_Repoquery --queryformat="%{name}.%{arch}" --whatprovides "$element"

			# Else, fallback to yum + parsing
			else
				typeset key val _junk pkg=""
				ammPkgYum::_Yum "provides" "$element" 2>/dev/null | while IFS=: read key val _junk; do
					key="$(ammString::Trim "$key")"
					val="$(ammString::Trim "$val")"

					# Somep ackages have a slot prefix, like "1:openssl"
					if [[ -z "${key#[0-9]}" ]]; then
						key="$val"
						val="$(ammString::Trim "$_junk")"
					fi

					# if we are within a finding block, print the package and reset it to avoid double print
					if [[ "$key" == "Filename" ]]; then
						if [[ -n "$pkg" ]]; then
							echo "$pkg"
							pkg=""
						fi

					# pkg is only empty after a Filename key, or at start
					else
						if [[ -z "$pkg" ]]; then
							pkg="$key"
							typeset arch="${pkg##*.}"
							# name-version.dist.arch (don't be greedy: name can contain '-' too)
							typeset name="${pkg%-*.*.*}"
							# In some dist, we have a -release in the version...
							name="${name/%-[0-9]*}"

							if [[ -n "$name" ]]; then
								ammLog::Debug "Renamed '$pkg' to '$name.$arch'"
								pkg="$name.$arch"
							fi
						fi
					fi

				done
			fi
		fi
	done
}

function ammPkgYum::InfoWhatProvidesFile {
	typeset file
	typeset -a filesQuery=()
	for file in "$@"; do
		# Absolute path or already wildcarded, good to go
		if [[ "${file:0:1}" == "/" ]] || [[ "${file:0:2}" == "*/" ]]; then
			filesQuery+=("$file")

		# Prefix it with */
		else
			filesQuery+=("*/$file")
		fi
	done

	ammPkgYum::InfoWhatProvides "${filesQuery[@]}"
}

function ammPkgYum::InfoContents {
	# Check for all input
	for pkg in "$@"; do
		# For each pkg, list content
		ammPkgYum::_Repoquery "--provides" "$pkg"
	done
}

# What versions are available for a package
function ammPkgYum::InfoVersions {
	typeset pkg="$1"
	ammPkgYum::_Yum info $pkg
}


# -----------------------------------------------------------------------------
# Data extraction
# -----------------------------------------------------------------------------

# @description  Download an archive from configured yum repositories and all dependencies
#
# @arg $1  (path)     Path where to download the packages (will be created if does not exists)
# @arg $@  (string[]) Packages to download
#
# @stdout  (path[]) List of archives downloaded
function ammPkgYum::DownloadRecursive {
	typeset outdir="$1"; shift

	[[ -d "$outdir" ]] || mkdir -p "$outdir"

	ammLog::Debug "Downloading into '$outdir' packages: $@"

	typeset tag pkg _junk
	typeset -i ret=1

	# TODO: dnf handles repotrack and yumdownloader with dnf-utils
	# Messages: 
	# [SKIPPED] bash-4.4.23-6.fc29.x86_64.rpm: Already downloaded
	# (6/16): fedora-gpg-keys-29-5.noarch.rpm       1.3 MB/s | 102 kB     00:00
	if ammExec::Exists repotrack >/dev/null; then
		typeset opts="--download_path='$outdir'"
		# For dnf, download_path does not exists. Use destdir, like yumdownloader
		[[ "$(readlink -f $(type -P repotrack))" == "/usr/libexec/dnf-utils" ]] && opts="--destdir='$outdir'"

		repotrack $opts "$@" 2>/dev/null | while read tag pkg _junk; do
			tag="${tag%:}"
			pkg="${pkg%:}"

			# Message: Downloading info-5.1-5.el7.x86_64.rpm
			if [[ "$tag" == "Downloading" ]]; then
				echo "$outdir/$pkg"

			# Message: rpm.todel/htop-2.2.0-3.el7.x86_64.rpm already exists and appears to be complete
			elif [[ -e "$tag" ]]; then
				echo "$tag"

			#  dnf output
			elif [[ -f "$outdir/$pkg" ]]; then
				echo "$outdir/$pkg"
			fi

		done
	else
		ammLog::Error "Unable to find repotrack"
		return 1
	fi

	return 0
}
# @description  Download an archive from configured yum repositories
#
# @arg $1  (path)     Path where to download the packages (will be created if does not exists)
# @arg $@  (string[]) Packages to download
#
# @stdout  (path[]) List of archives downloaded
function ammPkgYum::Download {
	typeset root="${1:-/}"
	typeset outdir="$2"
	shift 2

	[[ -d "$outdir" ]] || mkdir -p "$outdir"

	ammLog::Debug "Downloading into '$outdir' packages: $@"

	typeset f1 f2 f3 f4 _junk
	typeset -i ret=1
	typeset -a dlcmd=""

	# Select the best available command
	if ammExec::Exists yumdownloader; then
		dlcmd=(yumdownloader --installroot "$root" --destdir "$outdir" "$@")
		ammLog::Debug "Using yumdownloader as '${dlcmd[@]}'"

	# Need to do some checks due to yum being lazy
	else
		typeset cmdbase="ammPkgYum::_Yum --installroot=\"$root\" --downloadonly --downloaddir=\"$outdir\""
		dlcmd=(eval "(" $cmdbase install "$@" ";" $cmdbase reinstall "$@" ")")
		ammLog::Debug "Failback to yum with '${dlcmd[@]}'"
	fi

	${dlcmd[@]} | while read f1 f2 f3 f4 _junk; do
		# YUM: ---> Package htop.x86_64 0:2.2.0-3.el7 will be installed
		if [[ "$f1" == "--->" ]]; then
			# The downloaded version is the new or update
			if [[ "$_junk" =~ be\ (an\ update|(re)?installed) ]]; then
				# f3: keep only name
				# f4: keep version without slot
				# f3: add dist + arch
				echo "$outdir/${f3%.*}-${f4#*:}.${f3##*.}.rpm"
			fi

		# DNF: glibc-2.28-33.fc29.x86_64.rpm     3.0 MB/s | 3.8 MB    00:01
		elif [[ "$f1" =~ .+\.rpm ]]; then
			echo "$outdir/$f1"

		# DNF: [SKIPPED] glibc-2.28-33.fc29.x86_64.rpm: Already downloaded
		elif [[ "$f1" == "[SKIPPED]" ]]; then
			echo "$outdir/${f2%:}"
		fi

	done
}

# @description  Extract one or more packages into provided path
#
# @arg $1  (path)     Where to extract the archives
# @arg $@  (string[]) Archives or package names to be extracted
function ammPkgYum::Extract {
	typeset dst="$1"; shift

	ammLog::Debug "Extracting into '$dst' packages: $@"

	typeset pkgs="" pkgname pkgfile file
	for pkgfile in "$@"; do
		# if it's a file, just extract it from rpm
		if [[ -e "$pkgfile" ]]; then
			#pkgname="$(ammPkgRpm::Info "$pkgfile")"
			:

		# The file does not exists, download it
		else
			pkgname="$pkgfile"
			pkgfile="$(ammPkgYum::Download "$__AMMLIB_DATA/pkgRpm/Packages" "$pkgname")"

			if [[ -z "$pkgfile" ]]; then
				ammLog::Error "Unable to download package '$pkgname'. Out: '$pkgfile'"
				continue
			fi

		fi

		# extract the package (maybe multiple due to dependencies)
		for file in $pkgfile; do
			ammPkgRpm::Extract "$dst" "$file"
		done
	done

}


# -----------------------------------------------------------------------------
# Repository configuration
# -----------------------------------------------------------------------------

function ammPkgYum::RepoConfigure {
	typeset file="$1"
	typeset id="${2:-}"
	typeset name="${3:-}"
	typeset url="$4"
	shift 4

	# Check for filename
	[[ "${file#*.repo}" == "$file" ]] && ammLog::Warning "The file '$file' does not end with '.repo', this likely won't work"

	# Some defaults if needed
	[[ -z "$id" ]] && id="${file##*/}" && id="${id%.repo}" && id="${id// /-}"
	[[ -z "$name" ]] && name="$id"

	typeset urltype="baseurl"
	case "$url" in
		metalink:*|mirrorlist:*)
			urltype="${url%%:*}"
			url="${url#*:}"
			;;
	esac


	# Set the basic vars
	if ! [[ -d "${file%/*}" ]]; then
		if ! mkdir --parents "${file%/*}"; then
			ammLog::Error "Unable to create parent dir for '$file'"
			return 1
		fi
	fi
	cat >> "$file" <<-EOT
		[$id]
		name=$name
		$urltype=$url
		EOT

	typeset extra
	typeset -A extras=$(ammEnv::VarReturnArray AMMPKGYUM_REPO_DEFAULTS)
	for extra in "$@"; do
		if [[ "${extra//=/}" == "$extra" ]]; then
			ammLog::Warning "Malformated extra config: $extra (wanted format variable=value)"
			continue
		fi

		# add or change defaults with provided extra
		extras[${extra%%=*}]="${extra#*=}"
	done

	# Export default values to config file
	for extra in "${!extras[@]}"; do
		echo >> "$file" "$extra=${extras[$extra]}"
	done
	echo >> "$file"
}

function ammPkgYum::_RepoSet {
	typeset file="$1"
	typeset name="$2"
	typeset var="$3"
	typeset val="$4"
}

# @description  Override a release version var
function ammPkgYum::ReleaseSet {
	typeset root="${1:-/}"
	typeset releasever="$2"
	typeset distrover="${3:-centos-release}"

	# Override with /etc/yum/vars
	typeset dst="$root/etc/yum/vars/releasever"
	if ! [[ -d "${dst%/*}" ]]; then
		if ! mkdir --parents "${dst%/*}"; then
		ammLog::Error "Unable to create parent dir for '$file'"
		return 1
		fi
	fi

	echo "$releasever" >| "$dst"

	# Override in yum.conf
	ammPkgYum::ConfigSet "$root/etc/yum.conf" "releasever" "$releasever"
	ammPkgYum::ConfigSet "$root/etc/yum.conf" "distroverpkg" "$distrover"
	ammPkgYum::ConfigSet "$root/etc/yum.conf" "plugins" "1"
}

function ammPkgYum::ReleaseGet {
	typeset root="${1:-/}"

	if [[ "$root" != "/" ]]; then
		ammLog::Error "Different root from / is not yet supported"
		return 1
	fi

	if ammPkgYum::IsDnf; then
		python -c 'import dnf; db = dnf.dnf.Base(); print(db.conf.substitutions["releasever"])'
	else
		# Remove potential message "Loaded plugin"
		python -c 'import yum; yb = yum.YumBase(); print yb.conf.yumvar["releasever"]' | tail -n 1
	fi
}


function ammPkgYum::ConfigSet {
	typeset file="$1"
	typeset var="$2"
	typeset val="$3"

	if ! [[ -s "$file" ]]; then
		if ! [[ -d "${file%/*}" ]]; then
			if ! mkdir --parents "${file%/*}"; then
				ammLog::Error "Unable to create parent dir for '$file'"
				return 1
			fi
		fi

		echo "[main]" >| "$file"
	fi

	# TODO: smarter ini parser
	echo "$var=$val" >> "$file"

}

# -----------------------------------------------------------------------------
# Yum emulation
# -----------------------------------------------------------------------------

function ammPkgYum::_RepodataCache {
	typeset cks="$(echo "$1"|cksum)"; cks="${cks// /_}"
	typeset t="$__AMMLIB_DATATMP/pkgyum.repodata.$cks"

	mkdir -p "$t"
	echo "$t"
}

# Basic yum emulation
function ammPkgYum::RepodataGet {
	typeset url="$1"

	# We need http tools for this
	if ! ammLib::Load http ; then
		ammLog::Error "Unable to load http library."
		return 99
	fi

	# Download the file listing
	typeset cache="$(ammPkgYum::_RepodataCache "$url")"
	typeset repomd="$cache/repomd.xml"
	ammHttp::Fetch "$url/repodata/repomd.xml" "$repomd"

	# Download each xml file
	typeset xmls="$(grep 'location href=' "$repomd"|grep -o '".*\.xml.gz"' | tr -d '"')"
	for xml in $xmls; do
		typeset dstfile="$cache/${xml##*/}"

		# Skip if cache already here
		[[ -s "$dstfile" ]] && continue

		ammHttp::Fetch "$url/$xml" "$dstfile"

		# Check and unzip
		[[ -e "$dstfile" ]] && gzip -kdf "$dstfile"
	done

	# echo output
	echo "$cache"
}

function ammPkgYum::_RepodataParseFilelist {
	typeset repodata="$1"; shift

	# Parse all search
	for dep in "$@"; do

		# This is utterly ugly, and a really bad idea (parsing xml in awk...)
		# but it's the easiest available for quick an portable solution
		# Better way: use xpath or sqlite3 to do the queries

		awk -v search="$dep" '
		# Check what are we looking for (file, package...)
		BEGIN {
			searchFile = searchName = 0
			# File search always contains /
			if (index(search, "/"))
				searchFile = 1
			else
				searchName = 1
		}

		$1 =="<package" || $1 == "<version" {
			# Check for format in multiline xml...
			if (! $NF ~ />$/) {
				# WARNING !
			}
			# remove last > (or />)
			gsub(/\/?>$/,"",$NF)

			# Package opening is for a new package. Reset old vals
			if ($1 == "<package")
				pkgname = pkgvers = pkgrel = pkgarch = ""

			for (i=2; i<=NF; i++) {
				split($i,a,"=")
				lkey = a[1]
				lval = a[2]

				# remove extra "
				gsub(/"/,"",lval)

				# Name marks a new package
				if (lkey == "name") pkgname = lval
				if (lkey == "arch") pkgarch = lval
				if (lkey == "ver")  pkgvers = lval
				if (lkey == "rel")  pkgrel  = lval
			}

			# Search against pkg name. Now we have version and can print
			if (searchName && $1 == "<version" && pkgname == search) {
				print pkgname"-"pkgvers"-"pkgrel"."pkgarch".rpm"
			}
		}
		# Search against file provided.
		searchFile && match($1, /<file>(.+)<\/file>/, b) {
			# maybe try to change the glob to regex in "search" input
			if (b[1] ~ search) {
				print pkgname"-"pkgvers"-"pkgrel"."pkgarch".rpm"
			}
		}
		' $repodata/*-filelists.xml
	done
}

# Emulate the "yum provides" feature
function ammPkgYum::RepodataWhatProvides {
	typeset url="$1"; shift
	typeset pkgs=""

	typeset repodata="$(ammPkgYum::RepodataGet "$url")"

	ammPkgYum::_RepodataParseFilelist "$repodata" "$@" | sort | uniq
}
