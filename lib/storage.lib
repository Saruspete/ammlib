# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

typeset -gi AMMSTORAGE_MAJOR_DM
typeset -gi AMMSTORAGE_MAJOR_MD
typeset -gi AMMSTORAGE_MAJOR_LOOP
typeset -gi AMMSTORAGE_MAJOR_DRBD
typeset -g  AMMSTORAGE_UDEV_DATAPATH
typeset -gA AMMSTORAGE_UDEV_CACHE AMMSTORAGE_UDEV_PARSED
typeset -ga AMMSTORAGE_LSBLKFIELDS


function ammStorage::MetaCheck {
	# Should be in util-linux
	#ammExec::RequireOne lsblk blkid
	:
}

function ammStorage::MetaInit {

	ammLib::Require "string"

	# Some values are fixed in include/uapi/linux/major.h, some are dynamics
	AMMSTORAGE_MAJOR_DM="$(ammStorage::_GetModuleMajor "device-mapper")"
	AMMSTORAGE_MAJOR_MD=9
	AMMSTORAGE_MAJOR_LOOP=7
	AMMSTORAGE_MAJOR_DRBD=147

	AMMSTORAGE_UDEV_DATAPATH="/run/udev/data"
	AMMSTORAGE_UDEV_CACHE=  AMMSTORAGE_UDEV_PARSED=

	AMMSTORAGE_LSBLKFIELDS=(
		# Identifiers & HW Spec
		"NAME" "KNAME" "PATH" "MAJ:MIN" "UUID" "VENDOR" "MODEL" "SERIAL" "SIZE"
		# Partition
		"PTUUID" "PTTYPE" "PARTTYPE" "PARTTYPENAME" "PARTLABEL" "PARTUUID" "PARTFLAGS"
		# Filesystem
		"FSTYPE" "FSAVAIL" "FSSIZE" "FSUSED" "FSUSE%" "FSVER" "LABEL" "MOUNTPOINT" 
		"OWNER" "GROUP" "MODE"
		# Flags and state
		"RA" "RO" "RM" "HOTPLUG" "STATE"
		"ALIGNMENT" "MIN-IO" "OPT-IO" "PHY-SEC" "LOG-SEC" "ROTA"
		# Queue size
		"SCHED" "RQ-SIZE" "DISC-ALN" "DISC-GRAN" "DISC-MAX" "DISC-ZERO"
		"TYPE" "RAND" "PKNAME" "WSAME" "WWN" "HCTL" "TRAN" "SUBSYSTEMS" "REV" "ZONED"
	)
	# Will create associative arrays from the fields list, and removes invalid chars
	eval "typeset -gA AMMSTORAGE_BLK2{$(export IFS=,; echo "${AMMSTORAGE_LSBLKFIELDS[*]//[-%:]/}")}"

}

# -----------------------------------------------------------------------------
# Internal helpers
# -----------------------------------------------------------------------------

# @description  Get an information from udev
# @arg  $1 (string)   Blockdevice to query, identifiable by ammStorage::GetKernelName
# @arg  $@ (string[]) List of environment fields provided by udev to be fetched
function ammStorage::_GetFromUdev {
	typeset blockdev="$(ammStorage::GetKernelName "$1")"

	typeset majmin="$(ammStorage::GetMajorMinor "$blockdev" ":")"
	typeset udevpath="$AMMSTORAGE_UDEV_DATAPATH/b${majmin}"

	if [[ -s "$udevpath" ]]; then
		typeset -u field
		# Populate cache if needed
		if (set +u; [[ -z "${AMMSTORAGE_UDEV_PARSED[$majmin]}" ]]); then
			typeset line
			while read line; do
				case "$line" in
					# Environment ID
					E:*=*)
						field="${line%%=*}"
						AMMSTORAGE_UDEV_CACHE["${majmin}_${field#E:}"]="${line#*=}"
						;;
					S:*/by-id*/*) AMMSTORAGE_UDEV_CACHE["${majmin}_path"]="/dev/${line#S:}"
						;;
				esac
			done < "$udevpath"

			AMMSTORAGE_UDEV_PARSED[$majmin]="$(stat --format "%Y" "$udevpath")"
		fi

		for field in "$@"; do
			typeset -u varname="$majmin_${field}"
			if (set +u; [[ -v AMMSTORAGE_UDEV_CACHE[$varname] ]] ); then
				echo "$field='${AMMSTORAGE_UDEV_CACHE[$varname]}'"
			fi
		done
	fi
}

function ammStorage::_GetFromSysBlock {
	typeset blockdev="$1"
	typeset part="$2"

	typeset sysfs="/sys/class/block/$blockdev"
	if [[ -r "$sysfs" ]]; then
		if [[ -e "$sysfs/$part" ]]; then
			echo $(<$sysfs/$part)
			return 0
		fi
	else
		ammLog::Debug "Invalid requested sysfs '$blockdev' / '$part'"
		return 1
	fi
}

# @description  Helper to keep DRY from check & fetch sysfs
# @arg $1 (string) Path from sysfs to fetch
# @arg $2 (string) Device name or path
function ammStorage::_GetSysBlockGeneric {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	typeset field="$2"
	[[ -z "$dev" ]] && return 1
	ammStorage::_GetFromSysBlock "$dev" "$field"
}

function ammStorage::_GetModuleMajor {
	typeset modname="$1"

	typeset maj mod _junk zoneblock=false
	while read maj mod _junk; do
		if $zoneblock; then
			[[ "$mod" == "$modname" ]] && echo $maj
		else
			[[ "$maj $mod" == "Block devices:" ]] && zoneblock=true
		fi
	done < /proc/devices
}


function ammStorage::_CacheBlkData {

	if ammExec::Exists "lsblk"; then
		typeset line
		while read line; do
			line="${line//%/}"
			typeset name="${line%% *}"
			name="${name#*=}"
			ammLog::Debug "Parsing lsblk '$name': '$line'"

			# Use regex to parse all pairs
			while [[ "$line" =~ \ *([^=]+)=\"([^\"]*)\" ]]; do
				line="${line% }"
				typeset var="${BASH_REMATCH[1]}"  val="${BASH_REMATCH[2]}" tuple="${BASH_REMATCH[0]}"

				# Rename the var + fix locality to current function
				var="${var//[-:%]/}"

				eval "AMMSTORAGE_BLK2${var}[$name]='$val'"
				line="${line:${#tuple}}"
			done

		done < <(lsblk --pairs --output $(export IFS=,; echo "${AMMSTORAGE_LSBLKFIELDS[*]}") --bytes)

	else

		ammLog::Error "lsblk replacement is not yet done. Please install it !"
		return 1
	fi
}


# -----------------------------------------------------------------------------
# Listing devices and discovery
# -----------------------------------------------------------------------------

function ammStorage::ListParents {
	typeset blockdev="$1"

	typeset blockname="$(ammStorage::GetKernelName "$blockdev")"
	if [[ -z "$blockname" ]]; then
		ammLog::Warning "Unable to get kernel name for device '$blockdev'"
		return 1
	fi

	typeset parents=""
	typeset maj min
	read maj min < <(ammStorage::GetMajorMinor "$blockdev")


	# For partitions, use the special name of the devicea (there is no /slave folder)
	if ammStorage::IsPartition "$blockname"; then
		typeset part="$(ammStorage::_GetFromSysBlock "$blockname" "partition")"
		case $blockname in
			# SCSI disks: simple number appended
			sd*)    parents="${blockname%$part}" ;;
			# NVMe or MMC: remove p* in nvme0n1p3 or mmcblk1p3
			nvme*|mmc*)  parents="${blockname%p$part}" ;;
			# Unknown scheme: use plain listing
			*)
				ammLog::Debug "Unhandled partition naming '$blockname'. Doing listing"
				typeset bpath=""
				for bpath in /sys/class/block/*/$blockname; do
					if [[ -d "$bpath" ]]; then
						parents="${bpath#/sys/class/block/}"
						parents="${parents%/*}"
						break
					fi
				done
				;;
		esac

	# Device Mapper
	elif [[ "$maj" == "$AMMSTORAGE_MAJOR_DM" ]]; then
		# Nothing to do, should appear in /sys/class/block/dm-X/slaves
		:

	# MD-Raid device
	elif [[ "$maj" == "$AMMSTORAGE_MAJOR_MD" ]]; then
		:

	elif [[ "$maj" == "$AMMSTORAGE_MAJOR_LOOP" ]]; then
		:

	elif [[ "$maj" == "$AMMSTORAGE_MAJOR_DRBD" ]]; then
		:

	# ZFS: TODO: Parse "zpool list -vHPp"
	elif [[ -d "/sys/module/zfs" ]] && ammExec::Exists zpool && zpool list "$blockdev" >/dev/null 2>&1; then

		typeset dev _junk
		while read dev _junk; do
			:
		done < <(zpool list -vHPp "$blockdev")

	# btrfs: TODO
	elif [[ -d "/sys/module/btrfs" ]]; then
		:

	# No special case. Should be a physical device
	else
		#ammLog::Error "Unable to manage '$blockname': unknown device type"
		:
	fi


	# Check for slaves registerd in /sys
	typeset slave
	for slave in "/sys/class/block/$blockname/slaves/"*; do
		[[ -d "$slave" ]] || continue
		parents+="${slave##*/} "
	done

	ammLog::Debug "Parents of '$blockdev' ($blockname / $maj:$min): $parents"
	echo "$parents"
}

# @description  Try to find the real underlying device of a given blockdev
function ammStorage::ListUnderlyingDevices {
	typeset blockdev="$1"

	# Get its parents recursively
	typeset parents="$(ammStorage::ListParents "$blockdev")"
	if [[ -z "$parents" ]]; then
		ammLog::Debug "Device '$blockdev' is a media storage"
		echo "$blockdev"
	else
		for parent in $parents; do
			$FUNCNAME "$parent"
		done
	fi
}



function ammStorage::ListAvail {

	typeset bdpath
	for bdpath in /sys/class/block/*; do
		echo "${bdpath##*/}"
	done
}


function ammStorage::Exists {
	typeset blockdev="$1"

	# absolute path
	if [[ "${blockdev:0:1}" == "/" ]]; then
		[[ -b "$blockdev" ]] && return 0

	# Short name, try in usual folders
	else
		# Direct blockdev in /dev
		[[ -b "/dev/$blockdev" ]] && return 0

		[[ -b "/dev/mapper/$blockdev" ]] && return 0

		# Folder in /sys
		[[ -d "/sys/class/block/$blockdev" ]] && return 0
	fi
	# No standard path found, invalid blockdev
	ammLog::Debug "Invalid blockdev '$blockdev'"
	return 1
}



# -----------------------------------------------------------------------------
# Device identification
# -----------------------------------------------------------------------------


# @description  Returns the kernel (real) name of the device name or path
# @arg $1  (string) Name or path to the device
function ammStorage::GetKernelName {
	typeset name="$1"

	typeset realpath=""

	# Shortname (not absolute path)
	if [[ "${name:0:1}" != "/" ]]; then
		# Simple case: already real name with dev (maj:min) file
		if [[ -e "/sys/class/block/$name/dev" ]]; then
			ammLog::Debug "Device '$name' maps to itself"
			echo "$name"
			return 0

		# Not real name, try with usual path
		else
			if [[ -b "/dev/$name" ]]; then
				realpath="$(readlink -f "/dev/$name")"
				#ammLog::Debug "Found '$name' in /dev: '$realpath'"
			elif [[ -e "/dev/mapper/$name" ]]; then
				realpath="$(readlink -f "/dev/mapper/$name")"
				#ammLog::Debug "Found '$name' in /dev/mapper: '$realpath'"

			# TODO: add other paths, like drbd, etc...
			fi
		fi
	# Starts with / treat as absolute path
	else
		# Need real block device (dm-X instead of lvm "vgname-lvname" symlink)
		realpath="$(readlink -f $name)"

		ammLog::Debug "Device path '$name' maps to '$realpath'"

		if [[ -e "/sys/class/block/${realpath##*/}/dev" ]]; then
			echo "${realpath##*/}"
			return 0
		fi
	fi

	# Blockdevice exists (but can be an mknod' alias name
	if [[ -b "$realpath" ]]; then

		# If there is an entry in /sys for this disk/virt/part... got real
		typeset devname="${realpath##*/}"
		if [[ -d "/sys/class/block/$devname" ]]; then
			ammLog::Debug "Device '$name' ($realpath) maps to device '$devname'"
			echo "$devname"
			return 0

		# Not real name (eg mknod toto). Resolution through MAJ:MIN
		else
			typeset maj min btest
			read maj min < <(ammStorage::GetMajorMinor "$realpath")

			ammLog::Debug "Device '$name' ($realpath) maps to unknown block '$devname'"

			# There should be only 1 *direct* listing with this maj/min
			for btest in /sys/class/block/*/dev; do
				if [[ "$(<$btest)" == "$maj:$min" ]]; then
					btest="${btest%/dev}"
					echo "${btest##*/}"
					return 0
				fi
			done
		fi
	fi

	ammLog::Error "Unable to get real name for device '$name'"
	return 1
}
function ammStorage::GetRealName {
	ammLog::Deprecated "ammStorage::GetKernelName" "$@"
}

# @description  Returns the "Major Minor" format of the given device
# @arg $1  (string) Name of path of the block device
function ammStorage::GetMajorMinor {
	typeset blockdev="$1"
	typeset separator="${2:- }"

	# Cannot call GetKernelName before, can create infinite loop
	if ! ammStorage::Exists "$blockdev"; then
		ammLog::Error "Invalid blockdev '$blockdev'. Cannot get Major/minor"
		return 1
	fi

	# Get the shortname
	typeset blockname="$(ammStorage::GetKernelName "$blockdev")"

	typeset majmin=$(</sys/class/block/$blockname/dev)
	echo "${majmin%%:*}${separator}${majmin##*:}"
}

# @description  Returns the device name from the major:minor couple
# @arg $1  (string) Major:Minor like 253:0
function ammStorage::GetNameFromMajorMinor {
	typeset majmin="$1"

	if ! [[ -e "/sys/dev/block/$majmin" ]]; then
		ammLog::Warning "Device with major:minor '$majmin' does not exist"
		return 1
	fi

	typeset name="$(readlink -f "/sys/dev/block/$majmin")"
	echo "${name##*/}"
}

function ammStorage::GetType {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	[[ -z "$dev" ]] && return 1

# TODO: return a type: "nvme" "hdd" "ssd" "mdraid" "multipath" "luks1" "luks2" ..
# TODO: plus a subtype: crypt (luks aes-xts-plain64), part (nvme), lvm (meta), lvm (thin)
	typeset -l typ=""
	typeset tmp=
	# partition
	if ammStorage::IsPartition "$dev"; then
		typ="part"
	# DeviceMapper (LVM CRYPT-LUKS2 )
	elif tmp=$(ammStorage::_GetFromSysBlock "$dev" "dm/uuid") && [[ -n "$tmp" ]]; then
		typ="${tmp%%-*}"
	# NVMe
	elif [[ "${dev#nvme}" != "$dev" ]]; then
		typ="nvme"
	# Scsi Disk (sd)
	elif [[ "${dev#sd[a-z]}" != "$dev" ]]; then
		typ="disk"
	fi

	if [[ -z "$typ" ]]; then
		ammLog::Debug "Unable to get the type of '$dev'"
		return 1
	fi

	echo "$typ"
}

function ammStorage::GetName {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	[[ -z "$dev" ]] && return 1

	typeset name="$(ammStorage::_GetFromSysBlock "$dev" "dm/name")"
	[[ -z "$name" ]] && name="$dev"

	echo "$name"
}

# -----------------------------------------------------------------------------
# Hardware details
# -----------------------------------------------------------------------------

function ammStorage::GetModel {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	[[ -z "$dev" ]] && return 1

	typeset model="$(ammStorage::_GetFromSysBlock "$dev" "device/model")"
	# No direct model, fallback depending on type
	if [[ -z "$model" ]]; then
		typeset typ="$(ammStorage::GetType "$dev")"
		case "$typ" in
			# Crypt: display type and encryption
			crypt)
				;;
			# LVM: display LVM type
			lvm)
				;;
			# partition: get from its parent
			part)
				typeset parent="$(ammStorage::ListParents "$dev")"
				[[ -z "$parent" ]] && return 1
				model="($(ammStorage::_GetFromSysBlock "$parent" "device/model"))"
				;;
			*)
				return 1
		esac
	fi

	echo "$model"
}

function ammStorage::GetSerial {    ammStorage::_GetSysBlockGeneric "$1" "device/serial"; }
function ammStorage::GetFirmware {  ammStorage::_GetSysBlockGeneric "$1" "device/firmware_rev"; }

function ammStorage::GetHost {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	typeset host="$(readlink -f "/sys/class/block/$dev")"
	host="${host#*host}"
	host="${host%/*}"
	host="host${host}"
}

function ammStorage::GetTransport {
	typeset dev="$1"
	ammStorage::_GetSysBlockGeneric "device/" "$dev"
}

#function ammStorage::GetTransportLink
#function ammStorage::GetTransportLinkSpeed
#function ammStorage::GetTransport

# Intersting elements
# - ata_device/devX.Y/{class,trim,*mode}
# - block/$dev/mq/X/cpuX/
# - block/$dev/{stat,size,...}
# - block/$dev/device/{queue*,
# - block/$dev/device/scsi_disk/*/*
# - block/$dev/
# - /sys/devices/pci*/*/label :  "Onboard - SATA"

# -----------------------------------------------------------------------------
# Filesystem details
# -----------------------------------------------------------------------------
function ammStorage::_ParseProc {
	typeset bdev="$1"
	typeset field="$2"

	typeset bdev mntpnt fstyp mntopts _junk
	while read bdev mntpnt fstyp mntopts _junk; do
		# Skip non block-backed mounts
		ammStorage::Exists $bdev || continue

		bdev="$(ammStorage::GetKernelName "$bdev")"
		if [[ "$bdev" == "$dev" ]]; then
			eval echo "\$$field"
			return 0
		fi
	done < /proc/mounts
	return 1
}


function ammStorage::GetFsType {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	[[ -z "$dev" ]] && return 1

	# Try /proc/mounts for an already mounted fs
	typeset fstyp="$(ammStorage::_ParseProc "$dev" "fstyp")"
	if [[ -n "$fstyp" ]]; then
		echo "$fstyp"
		return 0
	fi

	# TODO Try with fs.lib discovery

	return 1
}


function ammStorage::GetMountpoint {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	[[ -z "$dev" ]] && return 1

	ammStorage::_ParseProc "$dev" "mntpnt"
}



function ammStorage::GetSize {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	[[ -z "$dev" ]] && return 1

	typeset -i nblocks blocksize
	# each blockdev has a size
	nblocks="$(ammStorage::_GetFromSysBlock "$dev" "size")"

	# But only the parent block has physical size
	blocksize="$(ammStorage::GetBlockSize "$dev")"

	echo $(($nblocks * $blocksize))
}

function ammStorage::GetBlockSize {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	[[ -z "$dev" ]] && return 1

	typeset bsize="$(ammStorage::_GetFromSysBlock "$dev" "queue/physical_block_size")"
	if [[ -z "$bsize" ]]; then
		typeset bsizetmp=
		typeset parent
		for parent in $(ammStorage::ListParents "$dev"); do
			bsizetmp="$($FUNCNAME "$parent")"
			if [[ -n "$bsizetmp" ]] && [[ -n "$bsize" ]] && [[ "$bsizetmp" != "$bsize" ]]; then
				ammLog::Warning "Multiple parent devices reported different block-size"
				break
			fi

			bsize="$bsizetmp"
		done
	fi

	echo $bsize
}

# @seealso:  https://www.seagate.com/fr/fr/tech-insights/advanced-format-4k-sector-hard-drives-master-ti/
function ammStorage::GetBlockSizeAvail {
	typeset dev="$(ammStorage::GetKernelName "$1")"
	[[ -z "$dev" ]] && return 1

	# nvme id-ns /dev/nvme0n1
	# lbaf  0 : ms:0   lbads:9  rp:0x2 (in use)
	# lbaf  1 : ms:0   lbads:12 rp:0 
	### Or full text:
	# LBA Format 0 : Metadata Size: 0 bytes - Data Size: 512 bytes - Relative Performance: 0x2 Good (in use)
	# LBA Format 1 : Metadata Size: 0 bytes - Data Size: 4096 bytes - Relative Performance: 0x1 Better

	# smartctl -c /dev/nvme0n1
	# Supported LBA Sizes (NSID 0x1)
	# Id Fmt  Data  Metadt  Rel_Perf
	# 0 +     512       0         2
	# 1 -    4096       0         0



}

# -----------------------------------------------------------------------------
# Queue management
# -----------------------------------------------------------------------------

function ammStorage::GetScheduler {
	:
}



# -----------------------------------------------------------------------------
# Devices state check
# -----------------------------------------------------------------------------

function ammStorage::IsPartition {
	typeset blockdev="$1"

	[[ -n "$(ammStorage::_GetFromSysBlock "$blockdev" "partition")" ]]
}

function ammStorage::IsHealthy {
	typeset blockdev="$1"
}

function ammStorage::IsComposite {
	:
}
function ammStorage::IsFlashDrive {
	typeset blockdev="$1"

	if ! ammStorage::Exists "$blockdev"; then
		ammLog::Error "Invalid block device '$blockdev'"
		return 1
	fi

	typeset blockname="$(ammStorage::GetKernelName)"
	typeset -i rotational=0

	# Get all underlying real block devices for the current one
	[[ "$(</sys/block/$blockname/queue/rotational)" == "0" ]]
}

# -----------------------------------------------------------------------------
# Device Mapper
# -----------------------------------------------------------------------------
function ammStorage::DeviceMapperGet {
	typeset dev="$1"


	ammExec::Require "dmsetup"

	typeset line
	while read line; do
		typeset name="${line%%,*}";  line="${line%%,*}"
		typeset uuid="${line%%,*}";  line="${line%%,*}"
		typeset minor="${line%%,*}"; line="${line%%,*}"
		typeset right="${line%%,*}"; line="${line%%,*}"
		typeset todo1="${line%%,*}"; line="${line%%,*}"
		typeset size="${line%%,*}";  line="${line%%,*}"
		typeset btype="${line%%,*}"; line="${line%%,*}"

		case $btype in
			# LVM
			linear|thin)
				# majmin-src  holders?
				;;
			thin-pool)
				# majmin-src   majmin-dst
				;;
			# Crypto
			crypt)
				# algo  key   offset?   majmin-src  blocksize?
				;;

			*)
				;;
		esac


	done < <(ammExec::AsUser "root" "dmsetup table --concise" | tr ';' '\n')
}




# -----------------------------------------------------------------------------
# Destructive operations
# -----------------------------------------------------------------------------

function ammStorage::SecureErase {
	typeset elem="$1"
	typeset doit="${2:-false}"

	typeset targetdev=""
	# Only work on real mountpoint to avoid dramatic issues
	if [[ -d "$elem" ]]; then
		typeset targetdev="$(ammFs::StoreFromMountpoint "$elem")"
	# Direct device provided
	elif [[ -b "$elem" ]]; then
		targetdev="$elem"
	fi

	if [[ -z "$targetdev" ]]; then
		ammLog::Error "The element to erase '$elem' is not a device, nor a mountpoint. Skipping"
		return 1
	fi

	ammLog::Debug "Gathering sub-devices of '$targetdev' to erase"

	# Work on all sub-devices
	typeset dev
	typeset -i r=0
	for dev in $(ammStorage::ListParents "$targetdev") $targetdev; do
		typeset typ="$(ammStorage::GetType "$dev")"
		case $typ in
			# Persistent Memory
			pmem)

				;;
			# NVMe must use secure-erase
			nvme)
				if ! ammExec::Exists "nvme"; then
					ammLog::Info "No 'nvme' tool available. Will try to install it"

					# Try to install the package
					ammLib::Require "pkg"
					if ! ammPkg::Install "nvme"; then
						ammLog::Error "Cannot get a working 'nvme' tool (usually from nvme-cli). Cannot secure-erase '$dev'"
						r+=1
						continue
					fi
				fi

				if ammString::IsYes "$doit"; then
					# https://github.com/linux-nvme/nvme-cli/blob/master/Documentation/nvme-format.txt
					\nvme format -s1 "$dev" --force
				else
					echo "Will erase '$dev' with 'nvme format -s1 $dev --force'"
				fi

				;;
			# SSD must use ATA TRIM
			ssd)

				# hdparm --trim-sector-ranges
				;;

			# HDD need to shred
			hdd)
				# Shred
				;;
		esac
	done

	return $r
}

