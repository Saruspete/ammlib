# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

function ammString::MetaCheck {
	# try to keep to coreutils
	ammExec::Require seq tr
}

typeset -g __AMMSTRING_UUID_MACADDR
typeset -g __AMMSTRING_UUID_TS1582

function ammString::MetaInit {
	__AMMSTRING_UUID_MACADDR=""

	# Days diff in Julian Calendar between 15 oct 1582 (uuid) and 1jan 1970 (epoch)
	#typeset -g __AMMSTRING_UUID_CALJUL2UNX=$(( (2440587 - 2299160) ))
	__AMMSTRING_UUID_TS1582=12219292800 # $(( (2440587 - 2299160) * 86400 ))

	__AMMSTRING_CHARS_ALPHANUM='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
	__AMMSTRING_CHARS_SPECIAL=',.;:-_+/?*(){}[]|!#&'
	__AMMSTRING_CHARS_ALL="${__AMMSTRING_CHARS_ALPHANUM}${__AMMSTRING_CHARS_SPECIAL}"

}

# -----------------------------------------------------------------------------
# Tests of string content, types and values
# -----------------------------------------------------------------------------

function ammString::Contains {
	typeset want="$1"
	typeset check="$2"
	[[ "${check//$want/}" != "$check" ]]
}

function ammString::ContainsWord {
	typeset want="$1"; shift

	# Lazy: just check
	typeset w
	for w in "$@"; do
		[[ "$w" == "$want" ]] && return 0
	done

	return 1
}

function ammString::StartsWith {
	typeset want="$1"
	typeset check="$2"
	[[ "${check#$want}" != "$check" ]]
}

function ammString::EndsWith {
	typeset want="$1"
	typeset check="$2"
	[[ "${check%$want}" != "$check" ]]
}

function ammString::IsNotEmpty {
	[[ -n "$1" ]]
}

function ammString::IsEmpty {
	[[ -z "$1" ]]
}

function ammString::IsFile {
	typeset file="$1"

	[[ -f "$file" ]]
}

function ammString::IsDirectory {
	typeset path="$1"

	[[ -d "$path" ]]
}

# @description Check if the string is an integer. Optionnaly, check its value
# @arg $1  (string) The string to check if it's an int
# @arg $2  (int) The minimal value of the integer
# @arg $3  (int) The maximal value of the integer
function ammString::IsInteger {
	typeset str="${1:-}"
	typeset min="${2:-}"
	typeset max="${3:-}"

	# Empty is not an int
	[[ -z "$str" ]] && return 1

	# R emove leading minus
	str="${str#-}"
	# Remove all numbers. Nothing should be left
	[[ -z "${str//[0-9]/}" ]] || return 1

	[[ -n "$min" ]] && [[ $str -lt $min ]] && return 1
	[[ -n "$max" ]] && [[ $str -gt $max ]] && return 1
	return 0
}

function ammString::IsHex {
	typeset str="$1"

	# If empty string or something not in hex
	#if [[ -z "$str" ]] || [[ $str =~ *[![:xdigit:]]* ]]; then
	if [[ -z "$str" ]] || [[ "$str" != "${str//[a-fA-F0-9]}" ]]; then
		return 1
	fi
	return 0
}

function ammString::IsYes {
	typeset str="$1"
	[[ $str =~ ^[yY][eE]?[sS]?$ ]]
}

function ammString::IsNo {
	typeset str="$1"
	[[ $str =~ ^[nN][oO]?$ ]]
}

function ammString::IsYesNo {
	typeset str="$1"
	ammString::IsYes "$str" || ammString::IsNo "$str"
}

function ammString::IsTrue {
	typeset -l str="$1"

	# Empty is false
	[[ -z "$str" ]] && return 1

	# "no" string
	ammString::IsNo "$str" && return 1
	# 0 value
	ammString::IsInteger "$str" && [[ $str -eq 0 ]] && return 1
	# True
	[[ "$str" == "false" ]] && return 1

	# Any other value is valid
	return 0
}


function ammString::IsIPv4 {
	typeset ip="${1:-}"

	# Should test what is faster: this long & complete regex, or the str processing ?
	# "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
	#typeset IPv4Regex="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
	#typeset HostRegex="^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$"
	# Minimum IP format is x.y (empty are 0)
	if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}(\.[0-9]{1,3})?(\.[0-9]{1,3})?$ ]]; then
		OIFS="$IFS"
		IFS='.'
		typeset -a ips=($ip)
		IFS=$OIFS
		# Last simple check on the values
		[[ ${ips[0]} -le 255 ]] && [[ ${ips[1]} -le 255 ]] || return 1
		if ( set +u; [[ -n ${ips[2]} ]] ); then
			[[ ${ips[2]} -le 255 ]] || return 1
		fi
		if ( set +u; [[ -n ${ips[3]} ]] ); then
			[[ ${ips[3]} -le 255 ]] || return 3
		fi
		return 0
	fi
	return 1
}

function ammString::IsIPv6 {
	typeset ip="${1:-}"

	# ::1
	[[ $ip =~ ^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$ ]]
}

function ammString::IsIP {
	typeset ip="$1"
	ammString::IsIPv4 "$ip" || ammString::IsIPv6 "$ip"
}

# Check if the input looks like an option (starts with - or --)
function ammString::IsOption {
	typeset opt="$1"

	[[ "${opt##--}" != "$opt" ]] || [[ "${opt##-}" != "$opt" ]]
}

function ammString::IsUri {
	typeset uri="$1"

	# from https://tools.ietf.org/html/rfc3986#appendix-B
	#[[ $uri =~ ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))? ]]
	[[ $uri =~ ^(([^:/?#]+):)(//([^/?#]*))([^?#]*)(\?([^#]*))?(#(.*))? ]]
}
function ammString::IsUrl {
	ammLog::Deprecated "ammString::IsUri" "$@"
}

function ammString::IsDate {
	typeset date="$1"

	typeset s="[-_/]"
	[[ $date =~ [0-9]{4}$s(0[0-9]|1[012])$s([012][0-9]|3[01]) ]]
}

function ammString::IsTime {
	typeset time="$1"

	[[ $time =~ ([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3,9})? ]]
}

function ammString::Type {
	typeset str="$1"

	# Network resources
	if ammString::IsUri "$str"; then
		echo "uri"
	elif ammString::IsIPv4 "$str"; then
		echo "ipv4"
	elif ammString::IsIPv6 "$str"; then
		echo "ipv6"

	# Date / Time
	elif ammString::IsDate "$str"; then
		if ammString::IsTime "$str"; then
			echo "datetime"
		else
			echo "date"
		fi
	elif ammString::IsTime "$str"; then
		echo "time"

	# Files
	elif [[ -f "$str" ]]; then
		echo "file"
	elif [[ -d "$str" ]]; then
		echo "folder"
	elif [[ -L "$str" ]]; then
		echo "symlink"
	else
		echo "string"
	fi
}


function ammString::IPv4IsInRange {
	typeset ipv4="$1"
	typeset ipLower="$2"
	typeset ipUpper="$3"

	if ! ammString::IsIPv4 "$ipv4"; then
		ammLog::Error "Invalid IPv4 '$ipv4' provided to $FUNCNAME"
		return 1
	fi
	if ! ammString::IsIPv4 "$ipLower"; then
		ammLog::Error "Invalid lower IPv4 '$ipLower' provided to $FUNCNAME"
		return 1
	fi
	if ! ammString::IsIPv4 "$ipUpper"; then
		ammLog::Error "Invalid IPv4 '$ipUpper' provided to $FUNCNAME"
		return 1
	fi

	typeset -a ipParts=(${ipv4//./ }) lowParts=(${ipLower//./ }) upParts=(${ipUpper//./ })
	typeset -i i=0
	for (( i=0; i<4; i++ )); do
		if [[ ${ipParts[$i]} -lt ${lowParts[$i]} ]] || [[ ${ipParts[$i]} -gt ${upParts[$i]} ]]; then
			return 1
		fi
	done
	return 0
}

function ammString::IPv4IsMulticast {
	typeset ipv4="$1"
	ammString::IPv4IsInRange "$ipv4" "224.0.0.0" "239.255.255.255"
}


# -----------------------------------------------------------------------------
# String modifiers
# -----------------------------------------------------------------------------

function ammString::_Trim {
	typeset str="$1"
	typeset chars="$2"

	# Protect special chars
	chars="${chars// /\\ }"
	chars="${chars//\t/$'\t'}"
	chars="${chars//\n/$'\n'}"

	while [[ "${str#$chars}" != "$str" ]]; do str="${str#$chars}"; done
	while [[ "${str%$chars}" != "$str" ]]; do str="${str%$chars}"; done
	echo "$str"

	# bash regex: Posix regex doesn't support ungreedy (+?) so...
	#if [[ "$str" =~ ^($chars)*(.+?)($chars)*$ ]]; then
	#	echo "${BASH_REMATCH[2]}"
	#else
	#	echo "$str"
	#fi

	# Protect the | as used by the regex
	#typeset chars="${2//|/\|}"
	#echo "$str" | sed -E \
	#	-e "s|^${chars}+||g" \
	#	-e "s|${chars}+$||Â§g"
}

function ammString::Trim {
	typeset str="${1:-}"
	typeset trimchars="${2:-[ \t\n]}"

	
	if [[ "$1" == "-" ]]; then
		while read str; do
			ammString::_Trim "$str" "$trimchars"
		done
	else
		ammString::_Trim "$str" "$trimchars"
	fi
}

#function ammString::Capitalize {
function ammString::ToCapital {
	typeset str="${1:-}"

	if [[ "$str" == "-" ]]; then
		while read str; do
			str="${str,,}"
			echo "${str^}"
		done
	else
		str="${str,,}"
		echo "${str^}"
	fi
}

function ammString::ToLower {
	typeset -l str="${1:-}"
	if [[ "$str" == "-" ]]; then
		while read str; do
			echo "$str"
		done
	else
		echo "$str"
	fi

}

function ammString::ToUpper {
	typeset -u str="${1:-}"
	if [[ "$str" == "-" ]]; then
		while read str; do
			echo "$str"
		done
	else
		echo "$str"
	fi
}

# @description Remove non-printable control chars
# 
function ammString::CleanShell {
	typeset str="$1"

	# Read from stdin
	if [[ "$str" == "-" ]]; then
		if ammExec::Exists sed; then
			sed 's,\x1B\[[0-9;]*[a-zA-Z],,g'
		elif ammExec::Exists perl; then
			perl -pe 's/\e\[[0-9;]*[a-zA-Z]//g'
		else
			# echo "${s//$'\x1B'\[[0-9][0-9]m/}"
			ammLog::Warning "Cannot find sed nor perl. Cannot clean string"
			return 1
		fi
	# [\x01-\x1F\x7F]
	else
		if ammExec::Exists sed; then
			echo "$str" | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g"
		elif ammExec::Exists perl; then
			perl -pe 's/\e\[[0-9;]*[a-zA-Z]//g'
		else
			# echo "${s//$'\x1B'\[[0-9][0-9]m/}"
			ammLog::Warning "Cannot find sed nor perl. Cannot clean string"
			return 1
		fi
	fi

	return 0
}

function ammString::Split {
	typeset str="$1"
	typeset sep="${2:-,}"

	echo "${str//$sep/ }"
}

function ammString::Glue {
	typeset sep="${1:-,}"
	shift

	(
		export IFS="$sep"
		# This is a very rare valid usage of "$*"
		echo "$*"
	)
}

function ammString::Replace {
	typeset search="$1"
	typeset replace="$2"

	typeset line
	if ammExec::Exists "sed"; then
		sed "s/$search/$replace/g"
	else
		while read -r line; do
			echo "${line//$search/$replace}"
		done
	fi
}

function ammString::ToCSV {
	typeset -a fields=("$@")

	# Escape existing quotes
	fields=("${fields[@]//\"/\"\"}");

	# Add " before and after fields
	fields=("${fields[@]/#/\"}")
	fields=("${fields[@]/%/\"}")

	# Finally echo with , as separator
	typeset IFS=','
	echo "${fields[*]}"
}



# @description  Clean a multi-line cmd (with \ at the end)
#
# @arg $1  (string) The string to extract cmdline from
function ammString::ExtractCmdline {
	typeset str="$1"
	# Inspired from https://www.linuxquestions.org/questions/programming-9/merge-lines-in-a-file-using-sed-191121/
	echo "$str" | grep -Pv '^\s*#' \
	| sed -e :a -e N -Ee 's/\\\s*(#.*)?\n^\s*/ /' -e ta
	# https://www.gnu.org/software/sed/manual/sed.html#Joining-lines
	# | sed -e ':x /\\$/ { N; s/\\\n//g ; bx }'
	# | sed -e ':x /\\$/ { N; s/\\\s*(#.*)?\n^\n//g ; bx }'
}

function ammString::InputToLines {
	typeset input="$1"

	# Read stdin
	if [[ "$input" == "-" ]]; then
		cat

	# Read from file
	elif ammString::IsFile "$input"; then
		cat "$input"

	# Just output input
	else
		echo "$input"
	fi
}


# -----------------------------------------------------------------------------
# Units and base conversion
# -----------------------------------------------------------------------------

function ammString::UnitToPow {
	typeset unitsrc="$1"
	typeset unitdst="${2:-}"

	if [[ "${#unitsrc}" != "1" ]]; then
		ammLog::Error "$FUNCNAME units are single char from SI unit"
	fi

	# For Exa, Zetta, Yotta, don't care about Zepto/Yocto. However, I hope you'll use bc instead of pure bash
	typeset -i pow=0 powdiv=0


	# Defualt output in bytes
	if [[ -n "$unitdst" ]]; then
		powdiv="$($FUNCNAME "$unitdst")"
	fi

	# Units to be used
	typeset units="bkmgtpezy"
	typeset -i i=0
	for (( i=0; i<${#units}; i++ )); do
		typeset -l unitTest="${units:$i:1}"
		typeset -l unitTestSrc="$unitsrc"

		# test if the SI Unit is the same
		if [[ "$unitTestSrc" == "$unitTest" ]]; then
			pow=$i
		fi
	done

	echo "$(( $pow-$powdiv ))"
}

# @description  Convert an unit
function ammString::UnitConvert {
	typeset value="$1"
	typeset unitsrc="${2:-}"
	typeset unitdst="${3:-}"


	typeset -i base=1024 coef=1 mult=1 div=1
	typeset useBc=false powOp="*"
	typeset out=""

	# Compound unit
	typeset basesrc="${unitsrc:(-1)}"
	typeset basedst="${unitdst:(-1)}"

	# If we have a different base...
	if [[ "$basesrc" != "$basedst" ]]; then
		# bit to byte: /8
		if [[ "$basesrc" == "b" ]]; then
			div=8
		# byte to bit: *8
		else
			mult=8
		fi
	fi

	typeset -i pow=$(ammString::UnitToPow "${unitsrc:0:1}" "${unitdst:0:1}" )

	# For very high values, bash will overflow
	if [[ $pow -gt 6 ]]; then
		useBc=true
		ammLog::Debug "Exponant '$pow' is > 6, using bc for calculation"
	fi

	# Negative power, division
	if [[ $pow -lt 0 ]]; then
		powOp="/"
		pow="$(( $pow * -1 ))"
	fi

	ammLog::Debug "Converting $unitsrc to $unitdst: $base**$pow * $mult / $div"

	# Using bc for high values
	if $useBc; then
		out="$(echo "$value $powOp $base^$pow * $mult / $div" | bc)"
	# or just plain bash
	else
		out="$(( $value $powOp $base**$pow * $mult / $div))"
	fi

	echo "$out"

	if [[ -z "$out" ]] || [[ "$out" == "0" ]]; then
		return 1
	fi
	return 0
}

function ammString::BaseConvert {
	typeset -i basesrc=$1
	typeset -i basedst=$2
	typeset number=$3

	# Stupid but quick
	if [[ "$basesrc" == "$basedst" ]]; then
		echo $number

#	# (<=64) => 10
	elif [[ $basedst == 10 ]] && [[ $basesrc -le $__AMMLIB_ARCHSIZE ]]; then
		# Bit of uglyness to avoid vim parsing error (due to the #)
		echo $(( $basesrc#$number \
		))
	# 16 => 10: pure bash
	elif [[ $basesrc -le 16 ]]; then
		# Beware to order of obase/ibase !
		echo "obase=$basedst; ibase=$basesrc; $number" | bc
		return $?
	else
		ammLog::Error "Cannot convert from $basesrc to $basedst"
		return 1
	fi
}

# @description Smart converted from octal, binary or hex to dec
# @arg string  $1 The number to convert to dec
function ammString::StrToDec {
	typeset num="$1"

	typeset base=10
	# Explicit prefix
	if [[ "${num:0:1}" == 0 ]]; then
		typeset pfx="${num:1:1}"
		case "$pfx" in
			b) base=2;  num="${num#0b}" ;;
			x) base=16; num="${num#0x}" ;;
			[0-7]) base=8 ; num="${num#0}" ;;
			*)
				ammLog::Error "Unknown base '$pfx'. Using base 10"
				;;
		esac
	# Hex chars
	elif [[ "${num//[a-zA-F]/}" != "$num" ]]; then
		base=16
	fi

	ammString::BaseConvert "$base" "10" "$num"
}

function ammString::HexToDec {
	ammString::BaseConvert 16 10 $1
}
function ammString::DecToHex {
	ammString::BaseConvert 10 16 $1
}

# @description  Apply the provided AND mask
# @arg (string) $1 The value to work on
# @arg (string) $2 The AND mask to apply on the value
function ammString::BitfieldAnd {
	typeset val="$(ammString::StrToDec "$1")"
	typeset mask="$(ammString::StrToDec "$2")"
	typeset outbase="${3:-10}"

	ammString::BaseConvert "10" "$outbase" "$(( $val & $mask ))"
}

# @description  Apply the provided OR mask
# @arg (string) $1 The value to work on
# @arg (string) $2 The OR mask to apply on the value
function ammString::BitfieldOr {
	typeset val="$(ammString::StrToDec "$1")"
	typeset mask="$(ammString::StrToDec "$2")"
	typeset outbase="${3:-10}"

	ammString::BaseConvert "10" "$outbase" "$(( $val | $mask ))"
}


function ammString::StrToBin {

	if ammExec::Exists perl; then
		perl -lpe '$_=unpack"B*"'
	#elif ammExec::Exists xxd; then
		#xxd -b
	else
		ammLog::Error "Cannot find suitable tool (perl, xxd)"
		return 1
	fi
}


# @description  Transforms a char string into a raw binary stream
# @arg 
function ammString::AsciiToStream {
	typeset str="${1:-}"

	# Call itself with stdin
	if [[ -n "$str" ]]; then
		echo -n "$str" | $FUNCNAME
		return $?
	fi

	if ammExec::Exists xxd; then
		xxd -revert -plain
	elif ammExec::Exists perl; then
		perl -pe '$_=~s/\s+//mxsg; $_=pack("H*",$_)'
	fi
}


function ammString::IPv4ToHex {
	typeset ipv4str="$1"
	typeset separator="${2:-}"

	typeset ipset strhex
	for ipset in ${ipv4str//./ }; do
		typeset byte="$(ammString::DecToHex $ipset)"
		[[ "${#byte}" == 1 ]] && byte="0$byte"
		strhex+="${byte}${separator}"
	done

	echo ${strhex%$separator}
}
function ammString::HexToIPv4 {
	typeset strhex="$1"
	if [[ "${#strhex}" != 8 ]]; then
		ammLog::Warning "Calling $FUNCNAME with arg length != 8"
		return 1
	fi

	typeset i ip4str=""
	for ((i=0; i<8; i+=2)); do
		ip4str+="${ip4str:+.}$(ammString::HexToDec ${strhex:$i:2})"
	done

	echo $ip4str
}

function ammString::IPv4QuadToInt {
	if [[ $# -eq 4 ]]; then
		echo $(($1 << 24 | $2 << 16 | $3 << 8 | $4))
		return 0
	fi

	echo "0"
	return 1
}

function ammString::IPv4ToInt {
	IFS='.' ammString::IPv4QuadToInt $1
}

function ammString::IntToIPv4 {
	echo "$(( ($1 >> 24) & 0xff )).$(( ($1 >> 16) & 0xff )).$(( ($1 >> 8) & 0xff )).$(( $1 & 0xff ))"
}


function ammString::IPv4MaskToPrefix {
	typeset mask="$1"

	typeset -i pfx=0 x=0$( printf '%o' ${mask//./ } )
	while [ $x -gt 0 ]; do
		pfx+=$(( $x % 2 ))
		x=$(( $x >> 1 ))
	done
	echo $pfx
}


function ammString::IntegerMin {

	typeset -i min="${1:-1}" v
	for v in "$@"; do
		[[ "$v" -lt $min ]] && min=$v
	done
	echo $min
}

function ammString::IntegerMax {

	typeset -i max="${1:-0}" v
	for v in "$@"; do
		[[ "$v" -gt $max ]] && max=$v
	done
	echo $max
}

function ammString::IntegerAverage {

	if ammExec::Exists awk; then
		echo "$@" | awk '{
			sum=0
			for(i=1;i<=NF;i++)
				sum+=$i
			print sum/NF 
		}'

	else

		typeset -i cnt=0 sum=0 v
		for v in "$@"; do
			sum+=$v
			cnt+=1
		done
		echo $(( sum / cnt ))
	fi
}

function ammString::IntegerSum {

	typeset -i v s=0
	for v in "$@"; do
		s+=$v
	done
	echo $s
}

# -----------------------------------------------------------------------------
# Search and filter
# -----------------------------------------------------------------------------

# @description  Filter a file to filter lines and columns
# @arg $1  (file)  File to filter, or - for stdin
# @arg $2  (regex) Keep lines matching this regex
# @arg $3  (regex) Keep columns matching this regex
# @arg $4  (int)   Column number (starts at 1), or offset to the matched column if starting by + or -
function ammString::Filter {
	typeset file="${1:-}"
	typeset filterline="${2:-.+}"
	typeset filtercolumn="${3:-}"
	typeset displaycolumn="${4:-0}"

	ammLog::Debug "fl=$filterline fc=$filtercolumn dc=$displaycolumn file=$file"

	if ammExec::Exists "awk"; then
		\awk -v fl="$filterline" -v fc="$filtercolumn" -v dc="$displaycolumn" '
		# Line matching
		match($0, fl) {
			# If we have a column pattern
			if (length(fc)) {
				matched = ""
				# Seek the column matching
				for (i=1; i<=NF; i++) {
					if (! match($i, fc))
						continue

					# Display column relative to the finding
					if (substr(dc,0,1) ~ /[+-]/)
						matched = matched" "$( i + dc )
					# specified absolute column
					else if (dc != 0)
						matched = matched" "$dc
					# default: current column
					else
						matched = matched" "$i
					fi
				}
				# Display match if something matched
				if (length(matched))
					print substr(matched, 2)
			}
			# No column filter, just print the requested column
			else {
				print $dc
			}
		}' "$file" | tr -cd '\t\n [:print:]'
	else
		# Try to emulate it in bash
		typeset line=
		while read -r line; do
			# Filter lines matching specified reqex
			if [[ "$line" =~ $filterline ]]; then
				# If we have a column filter, keep only matching columns
				if [[ -n "$filtercolumn" ]]; then
					typeset colId="" match=""
					typeset -a cols=($line)
					for colId in ${!cols[@]}; do
						typeset col="${cols[$colId]}"
						[[ $col =~ $filtercolumn ]] || continue

						typeset pfx="${displaycolumn:0:1}"
						# Display colun relative to the current one (offset)
						if [[ "$pfx" == "+" ]] || [[ "$pfx" == "-" ]]; then
							typeset colOffset="${displaycolumn:1}"
							match+="${cols[$(( $colId + $colOffset ))]} "
						# specified absolute column
						elif [[ "$displaycolumn" != 0 ]]; then
							match+="${cols[$(( $displaycolumn -1 ))]}"
						# default: current column
						else
							match+="${cols[$colId]}"
						fi
					done

					# If we have matched something, remove trailing space
					[[ -n "$match" ]] && echo "${match% }"

				# No column filter, just print whole line or fixed column
				else
					if [[ "$displaycolumn" != 0 ]]; then
						typeset -a cols=($line)
						echo "${cols[$(( $displaycolumn -1 ))]}"
					# default: current column
					else
						echo "$line"
					fi
				fi
			fi
		done < <(cat "$file")

	fi
}

function ammString::FilterTuples {
	typeset file="$1"
	typeset parameter="$2"
	typeset separator="${3:-=}"
	typeset skipmatch="${4:-^#}"

	typeset line
	while read line; do
		# Quick filter
		[[ -z "$line" ]] && continue
		[[ -n "$skipmatch" ]] && [[ $line =~ $skipmatch ]] && continue
		# Filter on field name
		typeset var="$(ammString::Trim ${line%%$separator*})"
		[[ "$var" != "$parameter" ]] && continue

		# Show current value
		echo "$(ammString::Trim ${line#*$separator})"

	done < "$file"
}


function ammString::LastLine {
	typeset in="${1:-}"

	# Recall itself with stdin
	if [[ -n "$in" ]]; then
		echo "$in" | $FUNCNAME
		return $?
	fi

	if ammExec::Exists "tail"; then
		tail -n 1
	else
		(
			typeset line last=
			while read line; do
				last="$line"
			done
			echo "$last"
		)
	fi
}

function ammString::FirstLine {
	typeset in="${1:-}"

	if [[ -n "$in" ]]; then
		echo "$in" | $FUNCNAME
		return $?
	fi

	if ammExec::Exists "head"; then
		head -n 1
	else
		typeset line
		read line
		echo "$line"
	fi
}

# @description  Select a count or percentage in a selection
function ammString::SelectCount {
	typeset count="$1"
	shift;

	typeset total="$#"
	# Parsing non-int parameters
	if ! ammString::IsInteger "$count"; then
		case "$count" in
			*%)
				typeset pct="${count%\%}"
				count="$(( $total * $pct / 100 ))"
				;;
			*)
				ammLog::Warning "Unmanaged count format: $count"
				ammLog::StackLog "Warning"
				return 1
				;;
		esac
	fi

	# check boundaries
	if [[ "$count" -gt "$total" ]]; then
		ammLog::Warning "Requesting more numbers than available elements. Ceiling value. count=$count total=$total"
		count=$total
	fi
	typeset -i i=0
	typeset -a elems=()
	for (( i=0; i<$count; i++ )); do
		elems+=("$1")
		shift
	done

	echo "${elems[@]}"
	return 0
}

# -----------------------------------------------------------------------------
# Counting
# -----------------------------------------------------------------------------
function ammString::CountWords {
	typeset -a arr=($@)
	echo ${#arr[@]}
}

function ammString::CountLines {
	typeset input="$1"

	typeset wcout=""

	if [[ -e "$input" ]]; then
		wcout="$(wc -l $input)"

	else
		wcout="$(echo "$input" | wc -l)"
	fi

	echo ${wcout%% *}
}

# -----------------------------------------------------------------------------
# Sorting
# -----------------------------------------------------------------------------
function ammString::SortWords {
	for w in "$@"; do
		echo "$w"
	done | sort | tr '\n' ' '
}

# -----------------------------------------------------------------------------
# Advanced format parsers
# -----------------------------------------------------------------------------

# @description Expand a composite list to its full expression
function ammString::ExpandStringBash {

	typeset    listFull=""
	typeset -i err=0

	# Using a simple indexed array allows final ordering
	typeset -a values

	typeset elem group
	for elem in "$@"; do

		group="$(echo "$elem"|tr '[]' '{}')"

		# bash-like expansion: pfx{g1,g2}sfx (with prefix/suffix & between {} )
		#if [[ $group =~ ([a-zA-Z0-9_-]*)\{(.+)(,.*)}([a-zA-Z0-9_-]*) ]]; then
		if [[ $group =~ ([-a-zA-Z0-9_/\.]*)\{(.+)}([-a-zA-Z0-9_/\.]*) ]]; then

			typeset pfx="${BASH_REMATCH[1]}"
			typeset seq="${BASH_REMATCH[2]}"
			typeset sfx="${BASH_REMATCH[3]}"

			# Composed of 2 or more sequences to be reassembled 'pfx{seq0,seq1,seq2}sfx'
			typeset seqLast="${seq##*,}"
			if [[ "$seq" != "$seqLast" ]]; then
				seq="${seq%,*}"

				# TODO: check if we have the same number of opening & closing braces within
				# all parts

				# Complex seq: group composed of 'v3,v4,v5'
				if [[ "${seq//,/}" != "$seq" ]]; then
					# Add the { } again
					values+=($($FUNCNAME "$pfx{$seq}$sfx"))
				# Complex seq: sequence composed of {v1..v2}
				elif [[ "${seq//../}" != "${seq}" ]]; then
					# The { } should be already within the sequence
					values+=($($FUNCNAME "$pfx$seq$sfx"))
				# Simple seq: no more sequence, add it to the list
				else
					ammLog::Debug "Adding '${pfx}${seq}${sfx}'"
					values+=("${pfx}${seq}${sfx}")
				fi

				# Complex seqLast: can only be composed of '{v1..v2}', the ',' is within seq
				if [[ "${seqLast//,/}" != "$seqLast" ]] || [[ "${seqLast//../}" != "${seqLast}" ]]; then
					values+=($($FUNCNAME "$pfx$seqLast$sfx"))
				else
					ammLog::Debug "Adding '${pfx}${seqLast}${sfx}'"
					values+=("${pfx}${seqLast}${sfx}")
				fi
			# No seqLast, try to expand seq for {..}
			else
				typeset i=""
				if [[ "${seq//[.,]/}" != "$seq" ]]; then
					# WARNING / TODO: This may be nasty here... Securization needed
					for i in $(eval echo $pfx{$seq}$sfx); do
						ammLog::Debug "Adding '$i' from '$seq'"
						values+=("$i")
					done
				else
					ammLog::Debug "Adding '$pfx$seq$sfx'"
					values+=("$pfx$seq$sfx")
				fi
			fi

		# Simple listing with ,
		elif [[ "${group//,/}" != "$group" ]]; then
			typeset part
			for part in ${group//,/ }; do
				ammLog::Debug "Adding listing '$group'"
				values+=("$part")
			done

		# Not a bash composite group, just use it raw
		else
			if [[ -n "$group" ]]; then
				ammLog::Debug "Adding raw '$group'"
				values+=($group)
			fi
		fi
	done

	echo -n ${values[@]}" "
}

function ammString::ListExpand {
	ammLog::Deprecated "ammString::ExpandIntegerList" "$@"
}

function ammString::ExpandIntegerList {
	typeset    listFull=""
	typeset -i err=0

	# Using a simple indexed array allows final ordering
	typeset -a values

	typeset elem group
	# Simple list of elements like '1,2,4-10,11'
	for elem in "$@"; do
		# Split the g1,g2,g3 parts
		for group in ${elem//,/ }; do
			# Split the groups (if any)
			typeset bgn="${group%-*}"
			typeset end="${group#*-}"

			# Some checks
			if [[ -z "$bgn" ]]; then
				ammLog::Warning "List begin element '$bgn' (in group '$group') cannot be empty. Skipping"
				continue
			fi
			if [[ -z "$end" ]]; then
				ammLog::Warning "List end element '$end' (in group '$group') cannot be empty. Skipping"
				continue
			fi

			if ! ammString::IsInteger "$bgn"; then
				ammLog::Warning "List element '$bgn' (in group '$group' in element '$elem') is not an integer. Skipping"
				continue
			fi
			if ! ammString::IsInteger "$end"; then
				ammLog::Warning "List element '$end' (in group '$group' in element '$elem') is not an integer. Skipping"
				continue
			fi

			# Different int values means a group like "start-end"
			if [[ "$bgn" != "$end" ]]; then
				typeset -i i=$bgn

				# We may want begin/end to be in ascending order.. or just swap them
				if [[ $bgn -gt $end ]]; then
					i=$end
					end=$bgn
				fi

				while [[ $i -le $end ]]; do
					values[$i]=$i
					i+=1
				done

			# Same, so no group, just the same value
			else
				values[$bgn]=$bgn
			fi
		done
	done

	# Show the final unique listing in a single echo
	echo -n ${values[@]}" "
}

# @description  Encode a binary stream to its 
function ammString::UrlEncode {

	# https://unix.stackexchange.com/questions/159253/decoding-url-encoding-percent-encoding
	if ammExec::Exists perl; then
		ammLog::Debug "UrlEncoding using perl"
		perl -p -e 's/([^A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg'
		# perl -MURI::Escape -e 'print uri_unescape($ARGV[0])' "$encoded_url"

	elif ammExec::Exists php; then
		ammLog::Debug "UrlEncoding using php"
		php -r 'while($l=fgets(STDIN)) echo rawurlencode($l);'

	elif ammExec::Exists jq; then
		# Beware: might add \x0a at the end?
		ammLog::Debug "UrlEncoding using jq"
		jq --raw-output --raw-input --slurp "@uri"

	elif ammExec::Exists xxd && ammExec::Exists sed; then
		xxd -p|tr -d \\n|sed 's/../%&/g'

	#elif ammExec::Exists awk; then
	#	awk -niord '{printf RT?$0chr("0x"substr(RT,2)):$0}' RS=%..

	# Plain bash fallback (might fail with \0 and \n)
	else
		# urlencode <string>
		typeset line
		ammLog::Warning "UrlEncoding using bash + printf: data may be corrupted"
		while read line; do
			typeset -i length="${#line}" i=0
			for (( i = 0; i < length; i++ )); do
				local c="${line:i:1}"
				case $c in
					[a-zA-Z0-9.~_-]) echo -n "$c" ;;
					*) printf '%%%02X' "'$c" ;;
				esac
			done
		done
	fi

}

function ammString::UrlDecode {
	:
	#sed 's@+@ @g;s@%@\\x@g' | xargs -0 printf "%b"
	# perl -pe 's/\%(\w\w)/chr hex $1/ge'

	# local url_encoded="${1//+/ }"
	#printf '%b' "${url_encoded//%/\\x}"
}

# -----------------------------------------------------------------------------
# Random
# -----------------------------------------------------------------------------

# @description  Generates a random number between min & max

function ammString::RandomInt {
	typeset min="${1:-0}"
	typeset max="${2:-32767}"

	if [[ $min -gt $max ]]; then
		ammLog::Warning "min($min) > max($max)"
		return 1
	fi

	echo $(( $RANDOM % ($max+1-$min) +$min ))
}

function ammString::RandomString {
	typeset size="$1"
	typeset alphabet="${2:-$__AMMSTRING_CHARS_ALPHANUM}"

	typeset res=""
	typeset -i i=0 posMax=${#alphabet}
	for (( i=0; i<$size; i++ )); do
		res+="${alphabet:$(ammString::RandomInt 0 $posMax):1}"
	done

	echo "$res"
}

# -----------------------------------------------------------------------------
# UUID
# -----------------------------------------------------------------------------

function ammString::UUIDVersionGet {
	typeset uuid="$1"

	# Remove optionnal -
	uuid="${uuid//-/}"

	# Look for bits 12 to 15 of time_high field
	echo ${uuid:12:1}
}


# @description  Generate a UUID depending on the version requested
function ammString::UUIDGenerate {
	typeset version="${1:-4}"
	typeset namespace="${2:-ammlib}"

	# Some inpiration taken from https://github.com/lowerpower/UUID-with-bash/blob/master/uuid.sh

	# Init first time for v1 & v2
	if [[ -z "${__AMMSTRING_UUID_MACADDR:-}" ]]; then
		# QnD, but less than most implementation on the net..
		typeset iface="$(ip -o route get 1.0.0.0 2>/dev/null| ammString::Filter "-" "1.0.0.0" "^dev$" "+1")"
		typeset macaddr="$(cat /sys/class/net/$iface/address 2>/dev/null)"
		if [[ -z "$macaddr" ]]; then
			macaddr="FE:E1:DE:AD:00:00"
			ammLog::Warning "Unable to get real MAC Interface. Using dummy $macaddr"
		fi
		__AMMSTRING_UUID_MACADDR="${macaddr//:/}"
	fi

	# General format of UUID, as per RFC 4122: https://www.ietf.org/rfc/rfc4122.txt
	# time-low "-" time-mid "-" time-high-and-version "-" clock-seq-and-reserved clock-seq-low "-" node

	typeset -a timenow=($(date -u +"%s %N"))
	# (EpochNow + Offset for Julian Cal) * 10000000 + NanoNow/100
	typeset timeuuid="$(( (${timenow[0]} + $__AMMSTRING_UUID_TS1582) ))${timenow[1]:0:7}"
	typeset timeuuidhex="$( ammString::DecToHex "$timeuuid" )"

	case $version in
		# NULL UUID
		0)
			echo "00000000-0000-0000-0000-000000000000"
			;;

		# UUIDv1: based on Time & MAC Addr
		1)
			typeset -l macaddr="$__AMMSTRING_UUID_MACADDR"
			typeset -l uuidstr="1${timeuuidhex}"
			# timelow / mid / high
			typeset uuid="${uuidstr: -8}-${uuidstr: -12:4}-${uuidstr: -16:4}"
			# TODO: clk_seq_hi_res clk_seq_low. Using PID for now
			uuid+="$(printf "%-4.4x" "$$")"
			# MAC Address
			uuid+="-$macaddr"

			echo "$uuid"
			;;

		# UUIDv3 (MD5) & UUIDv5 (SHA1)
		3|5)
			typeset -l uuid=""
			[[ "$version" == "3" ]] && uuid="$(ammString::HashMD5 "$namespace")"
			[[ "$version" == "5" ]] && uuid="$(ammString::HashSHA1 "$namespace")"

			echo "${uuid:0:8}-${uuid:8:4}-${version}${uuid:13:3}-${uuid:16:4}-${uuid:20:12}"

			;;

		# UUIDv4: Pure random
		4)
			# Use kernel if available
			if [[ -r "/proc/sys/kernel/random/uuid" ]]; then
				cat /proc/sys/kernel/random/uuid
			elif ammExec::Exists uuidgen; then
				uuidgen
			else
				typeset -l uuid="" str=""
				# 128 bits = 16 bytes = 32 hex chars
				for i in {1..16}; do
					str="$(ammString::DecToHex "$(( $RANDOM+256))" )"
					uuid+="${str:0:2}"
				done
				# After v4, there should be the variant on 2 or 3 bits... don't care here
				echo "${uuid:0:8}-${uuid:8:4}-4${uuid:12:3}-${uuid:16:4}-${uuid:20:12}"
			fi
			;;
		*)
			ammLog::Warning "Unmanaged UUID Version '$version'"
			;;
	esac
}


# -----------------------------------------------------------------------------
# Hash and crypto
# -----------------------------------------------------------------------------

function ammString::HashMD5 {
	typeset str="${1--}"
	typeset salt="${2:-}"

	if [[ "$str" == "-" ]] && [[ -n "$salt" ]]; then
		ammLog::Warning "$FUNCNAME: Cannot set a salt when reading from stdin"
	fi

	if ammExec::Exists "md5sum"; then
		if [[ -r "$str" ]] || [[ "$str" == "-" ]]; then
			(echo -n "$salt"; cat "$str") | md5sum "-" | cut -f 1 -d " "
		else
			echo -n "${salt}${str}" | md5sum | cut -f 1 -d " "
		fi
	elif ammExec::Exists "openssl"; then
		if [[ -r "$str" ]]; then
			(echo -n "$salt"; cat "$str") | openssl md5 | cut -f 2 -d " "
		elif [[ "$str" == "-" ]]; then
			openssl md5 | cut -f 2 -d " "
		else
			echo -n "${salt}${str}" | openssl md5 | cut -f 2 -d " "
		fi
	else
		ammLog::Error "No MD5 generator available (openssl or md5sum)"
		return 1
	fi

	return 0
}

function ammString::HashSHA1 {
	typeset str="${1--}"
	typeset salt="${2:-}"

	if [[ "$str" == "-" ]] && [[ -n "$salt" ]]; then
		ammLog::Warning "$FUNCNAME: Cannot set a salt when reading from stdin"
	fi

	if ammExec::Exists "sha1sum"; then
		if [[ -r "$str" ]] || [[ "$str" == "-" ]]; then
			(echo -n "$salt"; cat "$str") | sha1sum "-" | cut -f 1 -d " "
		else
			echo -n "${salt}${str}" | sha1sum | cut -f 1 -d " "
		fi
	elif ammExec::Exists "openssl"; then
		if [[ -r "$str" ]]; then
			(echo -n "$salt"; cat "$str") | openssl sha1 | cut -f 2 -d " "
		elif [[ "$str" == "-" ]]; then
			openssl sha1 | cut -f 2 -d " "
		else
			echo -n "${salt}${str}" | openssl sha1 | cut -f 2 -d " "
		fi
	else
		ammLog::Error "No SHA1 generator available (openssl or sha1sum)"
		return 1
	fi

	return 0
}

function ammString::HashSHA256 {
	typeset str="${1--}"
	typeset salt="${2:-}"

	if [[ "$str" == "-" ]] && [[ -n "$salt" ]]; then
		ammLog::Warning "$FUNCNAME: Cannot set a salt when reading from stdin"
	fi

	if ammExec::Exists "sha256sum"; then
		if [[ -r "$str" ]] || [[ "$str" == "-" ]]; then
			(echo -n "$salt"; cat "$str") | sha256sum "-" | cut -f 1 -d " "
		else
			echo -n "${salt}${str}" | sha256sum | cut -f 1 -d " "
		fi
	elif ammExec::Exists "openssl"; then
		if [[ -r "$str" ]]; then
			(echo -n "$salt"; cat "$str") | openssl sha256 | cut -f 2 -d " "
		elif [[ "$str" == "-" ]]; then
			openssl sha256 | cut -f 2 -d " "
		else
			echo -n "${salt}${str}" | openssl sha256 | cut -f 2 -d " "
		fi
	else
		ammLog::Error "No SHA256 generator available (openssl or sha256sum)"
		return 1
	fi

	return 0
}


# -----------------------------------------------------------------------------
# Pretty print and display helpers
# -----------------------------------------------------------------------------
function ammString::Repeat {
	typeset -i time="${1:-1}"
	typeset    char="${2:- }"
	seq -s "$char" $(($time+1)) | tr -d '[:digit:]'
}


