# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammSyscfgNetwork::MetaCheck {
	ammExec::Require ip awk
	ammLib::Require string
}

function ammSyscfgNetwork::MetaInit {
	ammLib::Require string
}

# -----------------------------------------------------------------------------
# Ifaces
# -----------------------------------------------------------------------------
function ammSyscfgNetwork::NicNameValidate {
	:
}

function ammSyscfgNetwork::NicGet {
	typeset i
	for ifacepath in /sys/class/net/*; do
		# Skip pseudo files like bonding_masters
		[[ -d "$ifacepath" ]] || continue
		typeset iface="${ifacepath##*/}"
		# Skip lo
		[[ "$iface" == "lo" ]] && continue

		echo "$iface"
	done
}

function ammSyscfgNetwork::NicCreate {
	typeset ifname="$1"
	typeset iftype="$2"

	if ammSyscfgNetwork::NicExists "$ifname"; then
		ammLog::Error "Nic '$ifname' already exists"
		return 1
	fi

	ip link add dev "$ifname" type "$iftype"
}


function ammSyscfgNetwork::NicExists {
	typeset iface="$1"
	[[ -d "/sys/class/net/$iface" ]]
}

function ammSyscfgNetwork::NicValidate {
	typeset iface="$1"

	if ! ammSyscfgNetwork::NicExists "$iface"; then
		ammLog::Error "Iface '$iface' does not exists"
		return 1
	fi
}

function ammSyscfgNetwork::NicIsUp {
	typeset iface="$1"

	ammSyscfgNetwork::NicValidate "$iface" || return $?
	[[ "$(( $(</sys/class/net/$iface/flags) & 1 ))" == "1" ]]
}

function ammSyscfgNetwork::NicEnable {
	typeset iface="$1"

	ammSyscfgNetwork::NicValidate "$iface" || return $?
	ip link set "$iface" up
}

# @description Display information about a given NIC
# @arg $1  Name of the NIC
function ammSyscfgNetwork::NicInfo {
	typeset iface="$1"
	typeset fields="${2:-carrier duplex speed type master mac vendorid deviceid ipv4 driver}"

	ammSyscfgNetwork::NicValidate "$iface" || return $?

	typeset ifpath="/sys/class/net/$iface"
	typeset field vendor
	for field in $fields; do
		case $field in
			carrier) echo "carrier=$(<$ifpath/carrier)"   ;;
			duplex)  echo "duplex=$(cat $ifpath/duplex 2>/dev/null|| echo none)" ;;
			speed)   echo "speed=$(cat $ifpath/speed 2>/dev/null || echo 0)" ;;
			mac)     echo "mac=$(cat $ifpath/address 2>/dev/null)" ;;
			#index)   echo "index=$(awk -F= '$1=="IFINDEX" {print $2}' $ifpath/uevent)" ;;
			index)   echo "index=$(<$ifpath/iflink)" ;;
			ipv4)    echo "ipv4=\"$(ip address show dev $iface|ammString::Filter "-" "inet" "^inet$" "+1")\"" ;;
			# More complex processing
			type)    echo "type=$(awk -F= '$1=="DEVTYPE"{print $2}' $ifpath/uevent)" ;;
			master)  echo "master=" ;;
			driver)
				typeset driver="$(readlink -f "$ifpath/device/driver" 2>/dev/null)"
				echo "driver=\"${driver##*/}\""
				;;

			vendorid) echo "vendorid=$(cat $ifpath/device/vendor 2>/dev/null)" ;;
			deviceid) echo "deviceid=$(cat $ifpath/device/device 2>/dev/null)" ;;
		esac
	done

	#ammSyscfgNetwork::CableInfo "$iface"

}

function ammSyscfgNetwork::CableInfo {
	typeset iface="$1"

	# Also try the connector link speed if any
	if ammExec::Exists ethtool; then
		# List of supported NICs is on ethtool source code:
		# sourceforge.net/projects/gkernel/files/ethtool/
		# Supported NICs as of v4.0 (their respective .c file in ethtool source)
		#    amd811e at76c50x e100 e1000 et131x fec_8xx ibm_emac igb ixgb ixgbe ixgbevf marvell natsemi pcnet32
		#    realtek sfc sfp smsc911x stmmac tg3 tse vioc
		typeset eeprom="$(ethtool --dump-module-eeprom $iface 2>/dev/null)"
		if [[ -n "$eeprom" ]]; then
			typeset key val keylast sfpactive sfpmedium
			while IFS=: read key val; do
				key="$(ammString::Trim "$key")"
				val="$(ammString::Trim "$val")"
				case "$key" in
					BR,\ Nominal)  echo "module_speed='${val%MBd}'" ;;
					Connector)
						# Only take parsed value
						echo "module_connector_raw='$val'"
						val="${val#*(}"
						val="${val%)*}"
						echo "module_connector_str='$val'"

						if ammString::ContainsWord "$val" "Copper"; then
							sfpmedium="Copper"
						fi
						;;

					Transceiver\ type)
						if ammString::ContainsWord "$val" "Passive"; then
							sfpactive="Passive"
						else
							sfpactive="Active"
						fi
						if ammString::ContainsWord "$val" "Cable" && [[ -z "${sfpmedium:-}" ]]; then
							sfpmedium="Copper"
						fi
						;;

					Length\ \(${sfpmedium:-}\))
						echo "length='$val'"
						echo "length_$sfpmedium='$val'"
						;;

					Length\ *)
						typeset typ="${key##*(}"
						typ="${typ%)}"
						typ="${typ//[^a-zA-Z0-9_]/_}"
						echo "length_$typ='$val'"
						;;

					# For vendor-{Name,OUI,PN,SN,rev}
					Vendor*)
						typeset -l vendor="${key// /-}"
						echo "vendor='$val'"
						;;

					# Format fix for Ethtool 3.5 in Centos6
					'')
						case "$keylast" in
							Transceiver\ codes)
								# Will be the equivalent of Transciever type"
								if [[ "${val:0:2}" == "=>" ]]; then
									val="${val:3}"
									if ammString::ContainsWord "$val" "Passive"; then
										sfpactive=false
									fi

								fi
								;;
						esac
						;;
				esac
				keylast="$key"
			done < <(echo "$eeprom")
		fi
	fi
}

# Get the nic that has a IP addr registered to it
function ammSyscfgNetwork::NicWithIp {
	typeset ip="$1"
	ip address show | awk -v ip="$ip"  '
		# New nic
		$1 ~/^[0-9]+:$/ {
			nic=$2
		}
		$1 ~ /inet6?/ {
			gsub("/[0-9]+", "", $2)
			if ($2 == ip) {
				gsub(/:$/,"",nic)
				print nic
			}
		}
		'
}

# -----------------------------------------------------------------------------
# IP Network management
# -----------------------------------------------------------------------------

# Return all IP adress of an iface
function ammSyscfgNetwork::IpAddrGetMain {
	# By default, ipv4. can be 4, 6, any or all
	typeset ipfamily="${1:-4}"

	# Multiple IPs, get the one that resolves to the hostname
	typeset myname="$(uname -n)"
	while read ip type _junk; do
		# Only select TCP
		[[ $type == "STREAM" ]] || continue

		# Selec the requested format
		case $ipfamily in
			4)    ammString::IsIPv4 "$ip" && echo "$ip" ;;
			6)    ammString::IsIPv6 "$ip" && echo "$ip" ;;
			both) ammString::IsIP   "$ip" && echo "$ip" ;;
			any)  ammString::IsIP   "$ip" && echo "$ip"; break ;;
			*)
				ammLog::Error "Unknown ipfamily '$ipfamily'. Want one of: 4, 6, any, both"
				break
				;;
		esac

	done < <(getent ahosts $myname)

}

# Return the main IP address: the Ip 
function ammSyscfgNetwork::IpAddrGet {
	typeset ipfamily="${1:-4}"
	typeset ifaces="${2:-}"

	[[ -z "$ifaces" ]] && ifaces="$(ammSyscfgNetwork::NicGet)"

	typeset iface
	for iface in $ifaces; do
		ammSyscfgNetwork::NicValidate "$iface" || continue

		typeset ipfilter=""
		case $ipfamily in
			4)   ipfilter="^inet$" ;;
			6)   ipfilter="^inet6$" ;;
			any) ipfilter="^inet6?$" ;;
			*)
				ammLog::Warning "Unknown ipfamily: '$ipfamily'. Must be one of: 4, 6, any"
				return 1
				;;
		esac

		ip address show dev $iface | ammString::Filter "$ipfilter" "$ipfilter" "+1"

	done
}

function ammSyscfgNetwork::IpAddrExists {
	typeset iface="$1"
	typeset ipaddr="$2"

	[[ -n "$(ip -o address show $iface|awk '$4 == "'$ipaddr'"')" ]]
}

function ammSyscfgNetwork::IpAddrAdd {
	typeset iface="$1"; shift
	typeset addr="$1"; shift

	ammLog::Info "ip address add '$addr' dev '$iface' $@"
	ip address add "$addr" dev "$iface" "$@"
}

function ammSyscfgNetwork::RouteExists {
	typeset iface="$1"
	typeset addr="$2"
	typeset extra="${3:-}"

	typeset route="$(ip -o route show dev "$iface" "$addr")"
	if [[ -n "$route" ]]; then
		if [[ -n "$extra" ]]; then
			# TODO...
			:
		fi
		return 0
	fi
	return 1
}

function ammSyscfgNetwork::RouteAdd {
	typeset iface="$1"
	typeset route="$2"
	typeset extra="${3:-}"

	ammLog::Info "ip route add '$route' dev '$iface' $extra"
	ip route add "$route" dev "$iface" $extra
}

function ammSyscfgNetwork::RouteUpdate {
	:
	#if ammSyscfgNetwork::RouteExists
}

# -----------------------------------------------------------------------------
# Namespace
# -----------------------------------------------------------------------------

function ammSyscfgNetwork::_NSInit {
	[[ -d "/var/run/netns" ]] || mkdir -p /var/run/netns

	# TODO: lookup /proc/*/ns/netns as a symink to /var/run/netns/
	typeset nsinode
	for nsinode in /proc/*/ns/net; do
		[[ -r $nsinode ]] || continue

	done
}

function ammSyscfgNetwork::NSExec {
	typeset ns="$1"
	typeset cmd="$2"

	ip netns exec "$ns" "$cmd"
}

function ammSyscfgNetwork::NSEnumerate {

	typeset -A namespaces
	typeset -i r=0

	# Populate our ns first, to avoid unneeded
	typeset mynspath="/proc/self/ns/net"
	typeset myns="$(stat -Lc %i "$mynspath")"
	namespaces[$myns]="$$"

	typeset netns
	for netns in /proc/*/ns/net; do
		if ! [[ -r "$netns" ]]; then
			# Skip if transcient process (proc has exited)
			[[ -d "${netns%/ns/net}" ]] || continue
			# Else, maybe permission error. Report as error
			ammLog::Debug "Cannot read namespace of '$netns'"
			r+=1
			continue
		fi
		typeset pid="${netns#/proc/}"
		pid="${pid%%/*}"

		if [[ $netns -ef $mynspath ]]; then
			namespaces[$myns]+=" $pid"
		else
			typeset nsid="$(stat -Lc "%c" "$netns" 2>/dev/null)"
			[[ -z "$nsid" ]] && continue
			namespaces[$nsid]+=" $pid"
		fi
	done

	ammEnv::VarExport namespaces

	return $r
}

function ammSyscfgNetwork::NSGetFromName {
	typeset name="$1"

	if ! [[ -d "/var/run/netns" ]]; then
		ammLog::Error "netns folder '/var/run/netns' doesn't exists. No lookup possible"
		return 1
	fi

	if ! [[ -e "/var/run/netns/$name" ]]; then
		ammLog::Error "netns name '$name' doesn't exists in '/var/run/netns'."
		return 1
	fi

	stat -Lc "%i" "/var/run/netns/$name" 2>/dev/null
}

# -----------------------------------------------------------------------------
# Bridge management
# -----------------------------------------------------------------------------

function ammSyscfgNetwork::BridgeVlanGet { :; }
function ammSyscfgNetwork::BridgeVlanSet { :; }
function ammSyscfgNetwork::BridgeVlanAdd {
	typeset iface="$1"
	typeset vlanid="$2"

	# Set the guest as vlan
	bridge vlan add dev "$iface" vid "$vlan" pvid untagged master
	# Push the vlan id to the host
	# /sys/class/net/$iface/bridge/vlan_filtering = 1
	# /sys/class/net/$iface/bridge/vlan_filtering = 1
	#bridge vlan add dev 
	#bridge vlan add vid "$vlan" dev "$bridge" master
}

function ammSyscfgNetwork::BridgeVlanDel { :; }
